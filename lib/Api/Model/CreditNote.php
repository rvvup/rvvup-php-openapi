<?php
/**
 * CreditNote
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Rvvup
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rvvup API
 *
 * Rvvup Public API
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: info@rvvup.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Rvvup\Api\Model;

use \ArrayAccess;
use \Rvvup\ObjectSerializer;

/**
 * CreditNote Class Doc Comment
 *
 * @category Class
 * @description Credit note object
 * @package  Rvvup
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreditNote implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreditNote';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'applied_to_invoice_ids' => 'string[]',
        'credit_note_date' => '\DateTime',
        'credit_note_number' => 'string',
        'id' => 'string',
        'invoice_id' => 'string',
        'items' => '\Rvvup\Api\Model\CreditNoteItem[]',
        'merchant_id' => 'string',
        'pending_refund_ids' => 'string[]',
        'reason' => 'string',
        'refund_ids' => 'string[]',
        'status' => '\Rvvup\Api\Model\CreditNoteStatus',
        'subtotal' => '\Rvvup\Api\Model\Money',
        'tax_amount' => '\Rvvup\Api\Model\Money',
        'total' => '\Rvvup\Api\Model\Money'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'applied_to_invoice_ids' => null,
        'credit_note_date' => 'date-time',
        'credit_note_number' => null,
        'id' => null,
        'invoice_id' => null,
        'items' => null,
        'merchant_id' => null,
        'pending_refund_ids' => null,
        'reason' => null,
        'refund_ids' => null,
        'status' => null,
        'subtotal' => null,
        'tax_amount' => null,
        'total' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'applied_to_invoice_ids' => false,
        'credit_note_date' => false,
        'credit_note_number' => false,
        'id' => false,
        'invoice_id' => false,
        'items' => false,
        'merchant_id' => false,
        'pending_refund_ids' => false,
        'reason' => false,
        'refund_ids' => false,
        'status' => false,
        'subtotal' => false,
        'tax_amount' => false,
        'total' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'applied_to_invoice_ids' => 'appliedToInvoiceIds',
        'credit_note_date' => 'creditNoteDate',
        'credit_note_number' => 'creditNoteNumber',
        'id' => 'id',
        'invoice_id' => 'invoiceId',
        'items' => 'items',
        'merchant_id' => 'merchantId',
        'pending_refund_ids' => 'pendingRefundIds',
        'reason' => 'reason',
        'refund_ids' => 'refundIds',
        'status' => 'status',
        'subtotal' => 'subtotal',
        'tax_amount' => 'taxAmount',
        'total' => 'total'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'applied_to_invoice_ids' => 'setAppliedToInvoiceIds',
        'credit_note_date' => 'setCreditNoteDate',
        'credit_note_number' => 'setCreditNoteNumber',
        'id' => 'setId',
        'invoice_id' => 'setInvoiceId',
        'items' => 'setItems',
        'merchant_id' => 'setMerchantId',
        'pending_refund_ids' => 'setPendingRefundIds',
        'reason' => 'setReason',
        'refund_ids' => 'setRefundIds',
        'status' => 'setStatus',
        'subtotal' => 'setSubtotal',
        'tax_amount' => 'setTaxAmount',
        'total' => 'setTotal'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'applied_to_invoice_ids' => 'getAppliedToInvoiceIds',
        'credit_note_date' => 'getCreditNoteDate',
        'credit_note_number' => 'getCreditNoteNumber',
        'id' => 'getId',
        'invoice_id' => 'getInvoiceId',
        'items' => 'getItems',
        'merchant_id' => 'getMerchantId',
        'pending_refund_ids' => 'getPendingRefundIds',
        'reason' => 'getReason',
        'refund_ids' => 'getRefundIds',
        'status' => 'getStatus',
        'subtotal' => 'getSubtotal',
        'tax_amount' => 'getTaxAmount',
        'total' => 'getTotal'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const REASON_FRAUD = 'FRAUD';
    public const REASON_DISCOUNT = 'DISCOUNT';
    public const REASON_DUPLICATE = 'DUPLICATE';
    public const REASON__RETURN = 'RETURN';
    public const REASON_OTHER = 'OTHER';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReasonAllowableValues()
    {
        return [
            self::REASON_FRAUD,
            self::REASON_DISCOUNT,
            self::REASON_DUPLICATE,
            self::REASON__RETURN,
            self::REASON_OTHER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('applied_to_invoice_ids', $data ?? [], null);
        $this->setIfExists('credit_note_date', $data ?? [], null);
        $this->setIfExists('credit_note_number', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('invoice_id', $data ?? [], null);
        $this->setIfExists('items', $data ?? [], null);
        $this->setIfExists('merchant_id', $data ?? [], null);
        $this->setIfExists('pending_refund_ids', $data ?? [], null);
        $this->setIfExists('reason', $data ?? [], null);
        $this->setIfExists('refund_ids', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('subtotal', $data ?? [], null);
        $this->setIfExists('tax_amount', $data ?? [], null);
        $this->setIfExists('total', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['applied_to_invoice_ids'] === null) {
            $invalidProperties[] = "'applied_to_invoice_ids' can't be null";
        }
        if ($this->container['credit_note_date'] === null) {
            $invalidProperties[] = "'credit_note_date' can't be null";
        }
        if ($this->container['credit_note_number'] === null) {
            $invalidProperties[] = "'credit_note_number' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['invoice_id'] === null) {
            $invalidProperties[] = "'invoice_id' can't be null";
        }
        if ($this->container['items'] === null) {
            $invalidProperties[] = "'items' can't be null";
        }
        if ($this->container['merchant_id'] === null) {
            $invalidProperties[] = "'merchant_id' can't be null";
        }
        if ($this->container['pending_refund_ids'] === null) {
            $invalidProperties[] = "'pending_refund_ids' can't be null";
        }
        if ($this->container['reason'] === null) {
            $invalidProperties[] = "'reason' can't be null";
        }
        $allowedValues = $this->getReasonAllowableValues();
        if (!is_null($this->container['reason']) && !in_array($this->container['reason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'reason', must be one of '%s'",
                $this->container['reason'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['refund_ids'] === null) {
            $invalidProperties[] = "'refund_ids' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['subtotal'] === null) {
            $invalidProperties[] = "'subtotal' can't be null";
        }
        if ($this->container['total'] === null) {
            $invalidProperties[] = "'total' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets applied_to_invoice_ids
     *
     * @return string[]
     */
    public function getAppliedToInvoiceIds()
    {
        return $this->container['applied_to_invoice_ids'];
    }

    /**
     * Sets applied_to_invoice_ids
     *
     * @param string[] $applied_to_invoice_ids The invoices this credit note was applied to.
     *
     * @return self
     */
    public function setAppliedToInvoiceIds($applied_to_invoice_ids)
    {
        if (is_null($applied_to_invoice_ids)) {
            throw new \InvalidArgumentException('non-nullable applied_to_invoice_ids cannot be null');
        }


        $this->container['applied_to_invoice_ids'] = $applied_to_invoice_ids;

        return $this;
    }

    /**
     * Gets credit_note_date
     *
     * @return \DateTime
     */
    public function getCreditNoteDate()
    {
        return $this->container['credit_note_date'];
    }

    /**
     * Sets credit_note_date
     *
     * @param \DateTime $credit_note_date The date and time for the credit note.
     *
     * @return self
     */
    public function setCreditNoteDate($credit_note_date)
    {
        if (is_null($credit_note_date)) {
            throw new \InvalidArgumentException('non-nullable credit_note_date cannot be null');
        }
        $this->container['credit_note_date'] = $credit_note_date;

        return $this;
    }

    /**
     * Gets credit_note_number
     *
     * @return string
     */
    public function getCreditNoteNumber()
    {
        return $this->container['credit_note_number'];
    }

    /**
     * Sets credit_note_number
     *
     * @param string $credit_note_number The number of the credit note.
     *
     * @return self
     */
    public function setCreditNoteNumber($credit_note_number)
    {
        if (is_null($credit_note_number)) {
            throw new \InvalidArgumentException('non-nullable credit_note_number cannot be null');
        }
        $this->container['credit_note_number'] = $credit_note_number;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The unique ID of the credit note.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets invoice_id
     *
     * @return string
     */
    public function getInvoiceId()
    {
        return $this->container['invoice_id'];
    }

    /**
     * Sets invoice_id
     *
     * @param string $invoice_id The ID of the invoice this credit note is for.
     *
     * @return self
     */
    public function setInvoiceId($invoice_id)
    {
        if (is_null($invoice_id)) {
            throw new \InvalidArgumentException('non-nullable invoice_id cannot be null');
        }
        $this->container['invoice_id'] = $invoice_id;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \Rvvup\Api\Model\CreditNoteItem[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \Rvvup\Api\Model\CreditNoteItem[] $items The items in the credit note.
     *
     * @return self
     */
    public function setItems($items)
    {
        if (is_null($items)) {
            throw new \InvalidArgumentException('non-nullable items cannot be null');
        }
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string $merchant_id The ID of the merchant that owns this credit note.
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        if (is_null($merchant_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_id cannot be null');
        }
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets pending_refund_ids
     *
     * @return string[]
     */
    public function getPendingRefundIds()
    {
        return $this->container['pending_refund_ids'];
    }

    /**
     * Sets pending_refund_ids
     *
     * @param string[] $pending_refund_ids The pending refunds still processing for this credit note.
     *
     * @return self
     */
    public function setPendingRefundIds($pending_refund_ids)
    {
        if (is_null($pending_refund_ids)) {
            throw new \InvalidArgumentException('non-nullable pending_refund_ids cannot be null');
        }


        $this->container['pending_refund_ids'] = $pending_refund_ids;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason The reason for creating a credit note
     *
     * @return self
     */
    public function setReason($reason)
    {
        if (is_null($reason)) {
            throw new \InvalidArgumentException('non-nullable reason cannot be null');
        }
        $allowedValues = $this->getReasonAllowableValues();
        if (!in_array($reason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'reason', must be one of '%s'",
                    $reason,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets refund_ids
     *
     * @return string[]
     */
    public function getRefundIds()
    {
        return $this->container['refund_ids'];
    }

    /**
     * Sets refund_ids
     *
     * @param string[] $refund_ids The refunds created for this credit note.
     *
     * @return self
     */
    public function setRefundIds($refund_ids)
    {
        if (is_null($refund_ids)) {
            throw new \InvalidArgumentException('non-nullable refund_ids cannot be null');
        }


        $this->container['refund_ids'] = $refund_ids;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Rvvup\Api\Model\CreditNoteStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Rvvup\Api\Model\CreditNoteStatus|string $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets subtotal
     *
     * @return \Rvvup\Api\Model\Money
     */
    public function getSubtotal()
    {
        return $this->container['subtotal'];
    }

    /**
     * Sets subtotal
     *
     * @param \Rvvup\Api\Model\Money $subtotal subtotal
     *
     * @return self
     */
    public function setSubtotal($subtotal)
    {
        if (is_null($subtotal)) {
            throw new \InvalidArgumentException('non-nullable subtotal cannot be null');
        }
        $this->container['subtotal'] = $subtotal;

        return $this;
    }

    /**
     * Gets tax_amount
     *
     * @return \Rvvup\Api\Model\Money|null
     */
    public function getTaxAmount()
    {
        return $this->container['tax_amount'];
    }

    /**
     * Sets tax_amount
     *
     * @param \Rvvup\Api\Model\Money|null $tax_amount tax_amount
     *
     * @return self
     */
    public function setTaxAmount($tax_amount)
    {
        if (is_null($tax_amount)) {
            throw new \InvalidArgumentException('non-nullable tax_amount cannot be null');
        }
        $this->container['tax_amount'] = $tax_amount;

        return $this;
    }

    /**
     * Gets total
     *
     * @return \Rvvup\Api\Model\Money
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param \Rvvup\Api\Model\Money $total total
     *
     * @return self
     */
    public function setTotal($total)
    {
        if (is_null($total)) {
            throw new \InvalidArgumentException('non-nullable total cannot be null');
        }
        $this->container['total'] = $total;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


