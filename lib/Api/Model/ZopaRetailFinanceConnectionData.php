<?php
/**
 * ZopaRetailFinanceConnectionData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Rvvup
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rvvup API
 *
 * Rvvup Public API
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: info@rvvup.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Rvvup\Api\Model;
use \Rvvup\ObjectSerializer;

/**
 * ZopaRetailFinanceConnectionData Class Doc Comment
 *
 * @category Class
 * @description Data for the Zopa Retail Finance Connection.
 * @package  Rvvup
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ZopaRetailFinanceConnectionData extends ConnectionData
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ZopaRetailFinanceConnectionData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'authentication_number' => 'string',
        'oauth_client_id' => 'string',
        'oauth_client_secret' => 'string',
        'retailer_id' => 'string',
        'sdk_api_key' => 'string',
        'token_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'authentication_number' => null,
        'oauth_client_id' => null,
        'oauth_client_secret' => null,
        'retailer_id' => null,
        'sdk_api_key' => null,
        'token_number' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'authentication_number' => false,
        'oauth_client_id' => false,
        'oauth_client_secret' => false,
        'retailer_id' => false,
        'sdk_api_key' => false,
        'token_number' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes + parent::openAPITypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats + parent::openAPIFormats();
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables + parent::openAPINullables();
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'authentication_number' => 'authenticationNumber',
        'oauth_client_id' => 'oauthClientId',
        'oauth_client_secret' => 'oauthClientSecret',
        'retailer_id' => 'retailerId',
        'sdk_api_key' => 'sdkApiKey',
        'token_number' => 'tokenNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'authentication_number' => 'setAuthenticationNumber',
        'oauth_client_id' => 'setOauthClientId',
        'oauth_client_secret' => 'setOauthClientSecret',
        'retailer_id' => 'setRetailerId',
        'sdk_api_key' => 'setSdkApiKey',
        'token_number' => 'setTokenNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'authentication_number' => 'getAuthenticationNumber',
        'oauth_client_id' => 'getOauthClientId',
        'oauth_client_secret' => 'getOauthClientSecret',
        'retailer_id' => 'getRetailerId',
        'sdk_api_key' => 'getSdkApiKey',
        'token_number' => 'getTokenNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }



    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->setIfExists('authentication_number', $data ?? [], null);
        $this->setIfExists('oauth_client_id', $data ?? [], null);
        $this->setIfExists('oauth_client_secret', $data ?? [], null);
        $this->setIfExists('retailer_id', $data ?? [], null);
        $this->setIfExists('sdk_api_key', $data ?? [], null);
        $this->setIfExists('token_number', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets authentication_number
     *
     * @return string|null
     */
    public function getAuthenticationNumber()
    {
        return $this->container['authentication_number'];
    }

    /**
     * Sets authentication_number
     *
     * @param string|null $authentication_number authentication_number
     *
     * @return self
     */
    public function setAuthenticationNumber($authentication_number)
    {
        if (is_null($authentication_number)) {
            throw new \InvalidArgumentException('non-nullable authentication_number cannot be null');
        }
        $this->container['authentication_number'] = $authentication_number;

        return $this;
    }

    /**
     * Gets oauth_client_id
     *
     * @return string|null
     */
    public function getOauthClientId()
    {
        return $this->container['oauth_client_id'];
    }

    /**
     * Sets oauth_client_id
     *
     * @param string|null $oauth_client_id oauth_client_id
     *
     * @return self
     */
    public function setOauthClientId($oauth_client_id)
    {
        if (is_null($oauth_client_id)) {
            throw new \InvalidArgumentException('non-nullable oauth_client_id cannot be null');
        }
        $this->container['oauth_client_id'] = $oauth_client_id;

        return $this;
    }

    /**
     * Gets oauth_client_secret
     *
     * @return string|null
     */
    public function getOauthClientSecret()
    {
        return $this->container['oauth_client_secret'];
    }

    /**
     * Sets oauth_client_secret
     *
     * @param string|null $oauth_client_secret oauth_client_secret
     *
     * @return self
     */
    public function setOauthClientSecret($oauth_client_secret)
    {
        if (is_null($oauth_client_secret)) {
            throw new \InvalidArgumentException('non-nullable oauth_client_secret cannot be null');
        }
        $this->container['oauth_client_secret'] = $oauth_client_secret;

        return $this;
    }

    /**
     * Gets retailer_id
     *
     * @return string|null
     */
    public function getRetailerId()
    {
        return $this->container['retailer_id'];
    }

    /**
     * Sets retailer_id
     *
     * @param string|null $retailer_id retailer_id
     *
     * @return self
     */
    public function setRetailerId($retailer_id)
    {
        if (is_null($retailer_id)) {
            throw new \InvalidArgumentException('non-nullable retailer_id cannot be null');
        }
        $this->container['retailer_id'] = $retailer_id;

        return $this;
    }

    /**
     * Gets sdk_api_key
     *
     * @return string|null
     */
    public function getSdkApiKey()
    {
        return $this->container['sdk_api_key'];
    }

    /**
     * Sets sdk_api_key
     *
     * @param string|null $sdk_api_key sdk_api_key
     *
     * @return self
     */
    public function setSdkApiKey($sdk_api_key)
    {
        if (is_null($sdk_api_key)) {
            throw new \InvalidArgumentException('non-nullable sdk_api_key cannot be null');
        }
        $this->container['sdk_api_key'] = $sdk_api_key;

        return $this;
    }

    /**
     * Gets token_number
     *
     * @return string|null
     */
    public function getTokenNumber()
    {
        return $this->container['token_number'];
    }

    /**
     * Sets token_number
     *
     * @param string|null $token_number token_number
     *
     * @return self
     */
    public function setTokenNumber($token_number)
    {
        if (is_null($token_number)) {
            throw new \InvalidArgumentException('non-nullable token_number cannot be null');
        }
        $this->container['token_number'] = $token_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


