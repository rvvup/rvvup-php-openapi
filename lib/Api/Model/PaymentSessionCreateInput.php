<?php
/**
 * PaymentSessionCreateInput
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Rvvup
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rvvup API
 *
 * Rvvup Public API
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: info@rvvup.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Rvvup\Api\Model;

use \ArrayAccess;
use \Rvvup\ObjectSerializer;

/**
 * PaymentSessionCreateInput Class Doc Comment
 *
 * @category Class
 * @description Input for creating a payment session.
 * @package  Rvvup
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentSessionCreateInput implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentSessionCreateInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'billing_address' => '\Rvvup\Api\Model\AddressInput',
        'customer' => '\Rvvup\Api\Model\CustomerInput',
        'discount_total' => '\Rvvup\Api\Model\MoneyInput',
        'external_reference' => 'string',
        'items' => '\Rvvup\Api\Model\ItemInput[]',
        'metadata' => 'array<string,string>',
        'payment_capture_type' => '\Rvvup\Api\Model\PaymentCaptureType',
        'payment_method' => '\Rvvup\Api\Model\PaymentMethod',
        'payment_type' => '\Rvvup\Api\Model\PaymentType',
        'requires_shipping' => 'bool',
        'session_key' => 'string',
        'shipping_address' => '\Rvvup\Api\Model\AddressInput',
        'shipping_total' => '\Rvvup\Api\Model\MoneyInput',
        'tax_total' => '\Rvvup\Api\Model\MoneyInput',
        'total' => '\Rvvup\Api\Model\MoneyInput'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'billing_address' => null,
        'customer' => null,
        'discount_total' => null,
        'external_reference' => null,
        'items' => null,
        'metadata' => null,
        'payment_capture_type' => null,
        'payment_method' => null,
        'payment_type' => null,
        'requires_shipping' => null,
        'session_key' => null,
        'shipping_address' => null,
        'shipping_total' => null,
        'tax_total' => null,
        'total' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'billing_address' => false,
        'customer' => false,
        'discount_total' => false,
        'external_reference' => false,
        'items' => false,
        'metadata' => false,
        'payment_capture_type' => false,
        'payment_method' => false,
        'payment_type' => false,
        'requires_shipping' => false,
        'session_key' => false,
        'shipping_address' => false,
        'shipping_total' => false,
        'tax_total' => false,
        'total' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'billing_address' => 'billingAddress',
        'customer' => 'customer',
        'discount_total' => 'discountTotal',
        'external_reference' => 'externalReference',
        'items' => 'items',
        'metadata' => 'metadata',
        'payment_capture_type' => 'paymentCaptureType',
        'payment_method' => 'paymentMethod',
        'payment_type' => 'paymentType',
        'requires_shipping' => 'requiresShipping',
        'session_key' => 'sessionKey',
        'shipping_address' => 'shippingAddress',
        'shipping_total' => 'shippingTotal',
        'tax_total' => 'taxTotal',
        'total' => 'total'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'billing_address' => 'setBillingAddress',
        'customer' => 'setCustomer',
        'discount_total' => 'setDiscountTotal',
        'external_reference' => 'setExternalReference',
        'items' => 'setItems',
        'metadata' => 'setMetadata',
        'payment_capture_type' => 'setPaymentCaptureType',
        'payment_method' => 'setPaymentMethod',
        'payment_type' => 'setPaymentType',
        'requires_shipping' => 'setRequiresShipping',
        'session_key' => 'setSessionKey',
        'shipping_address' => 'setShippingAddress',
        'shipping_total' => 'setShippingTotal',
        'tax_total' => 'setTaxTotal',
        'total' => 'setTotal'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'billing_address' => 'getBillingAddress',
        'customer' => 'getCustomer',
        'discount_total' => 'getDiscountTotal',
        'external_reference' => 'getExternalReference',
        'items' => 'getItems',
        'metadata' => 'getMetadata',
        'payment_capture_type' => 'getPaymentCaptureType',
        'payment_method' => 'getPaymentMethod',
        'payment_type' => 'getPaymentType',
        'requires_shipping' => 'getRequiresShipping',
        'session_key' => 'getSessionKey',
        'shipping_address' => 'getShippingAddress',
        'shipping_total' => 'getShippingTotal',
        'tax_total' => 'getTaxTotal',
        'total' => 'getTotal'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('billing_address', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('discount_total', $data ?? [], null);
        $this->setIfExists('external_reference', $data ?? [], null);
        $this->setIfExists('items', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('payment_capture_type', $data ?? [], null);
        $this->setIfExists('payment_method', $data ?? [], null);
        $this->setIfExists('payment_type', $data ?? [], null);
        $this->setIfExists('requires_shipping', $data ?? [], false);
        $this->setIfExists('session_key', $data ?? [], null);
        $this->setIfExists('shipping_address', $data ?? [], null);
        $this->setIfExists('shipping_total', $data ?? [], null);
        $this->setIfExists('tax_total', $data ?? [], null);
        $this->setIfExists('total', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['external_reference']) && (mb_strlen($this->container['external_reference']) > 255)) {
            $invalidProperties[] = "invalid value for 'external_reference', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['external_reference']) && (mb_strlen($this->container['external_reference']) < 1)) {
            $invalidProperties[] = "invalid value for 'external_reference', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['payment_method'] === null) {
            $invalidProperties[] = "'payment_method' can't be null";
        }
        if ($this->container['payment_type'] === null) {
            $invalidProperties[] = "'payment_type' can't be null";
        }
        if ($this->container['session_key'] === null) {
            $invalidProperties[] = "'session_key' can't be null";
        }
        if ((mb_strlen($this->container['session_key']) > 64)) {
            $invalidProperties[] = "invalid value for 'session_key', the character length must be smaller than or equal to 64.";
        }

        if ((mb_strlen($this->container['session_key']) < 1)) {
            $invalidProperties[] = "invalid value for 'session_key', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['total'] === null) {
            $invalidProperties[] = "'total' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets billing_address
     *
     * @return \Rvvup\Api\Model\AddressInput|null
     */
    public function getBillingAddress()
    {
        return $this->container['billing_address'];
    }

    /**
     * Sets billing_address
     *
     * @param \Rvvup\Api\Model\AddressInput|null $billing_address billing_address
     *
     * @return self
     */
    public function setBillingAddress($billing_address)
    {
        if (is_null($billing_address)) {
            throw new \InvalidArgumentException('non-nullable billing_address cannot be null');
        }
        $this->container['billing_address'] = $billing_address;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \Rvvup\Api\Model\CustomerInput|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \Rvvup\Api\Model\CustomerInput|null $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            throw new \InvalidArgumentException('non-nullable customer cannot be null');
        }
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets discount_total
     *
     * @return \Rvvup\Api\Model\MoneyInput|null
     */
    public function getDiscountTotal()
    {
        return $this->container['discount_total'];
    }

    /**
     * Sets discount_total
     *
     * @param \Rvvup\Api\Model\MoneyInput|null $discount_total discount_total
     *
     * @return self
     */
    public function setDiscountTotal($discount_total)
    {
        if (is_null($discount_total)) {
            throw new \InvalidArgumentException('non-nullable discount_total cannot be null');
        }
        $this->container['discount_total'] = $discount_total;

        return $this;
    }

    /**
     * Gets external_reference
     *
     * @return string|null
     */
    public function getExternalReference()
    {
        return $this->container['external_reference'];
    }

    /**
     * Sets external_reference
     *
     * @param string|null $external_reference Your reference to identify the payment session.
     *
     * @return self
     */
    public function setExternalReference($external_reference)
    {
        if (is_null($external_reference)) {
            throw new \InvalidArgumentException('non-nullable external_reference cannot be null');
        }
        if ((mb_strlen($external_reference) > 255)) {
            throw new \InvalidArgumentException('invalid length for $external_reference when calling PaymentSessionCreateInput., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($external_reference) < 1)) {
            throw new \InvalidArgumentException('invalid length for $external_reference when calling PaymentSessionCreateInput., must be bigger than or equal to 1.');
        }

        $this->container['external_reference'] = $external_reference;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \Rvvup\Api\Model\ItemInput[]|null
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \Rvvup\Api\Model\ItemInput[]|null $items List of items that the customer is purchasing.
     *
     * @return self
     */
    public function setItems($items)
    {
        if (is_null($items)) {
            throw new \InvalidArgumentException('non-nullable items cannot be null');
        }
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return array<string,string>|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array<string,string>|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets payment_capture_type
     *
     * @return \Rvvup\Api\Model\PaymentCaptureType|null
     */
    public function getPaymentCaptureType()
    {
        return $this->container['payment_capture_type'];
    }

    /**
     * Sets payment_capture_type
     *
     * @param \Rvvup\Api\Model\PaymentCaptureType|null $payment_capture_type payment_capture_type
     *
     * @return self
     */
    public function setPaymentCaptureType($payment_capture_type)
    {
        if (is_null($payment_capture_type)) {
            throw new \InvalidArgumentException('non-nullable payment_capture_type cannot be null');
        }
        $this->container['payment_capture_type'] = $payment_capture_type;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return \Rvvup\Api\Model\PaymentMethod
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param \Rvvup\Api\Model\PaymentMethod $payment_method payment_method
     *
     * @return self
     */
    public function setPaymentMethod($payment_method)
    {
        if (is_null($payment_method)) {
            throw new \InvalidArgumentException('non-nullable payment_method cannot be null');
        }
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets payment_type
     *
     * @return \Rvvup\Api\Model\PaymentType
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param \Rvvup\Api\Model\PaymentType $payment_type payment_type
     *
     * @return self
     */
    public function setPaymentType($payment_type)
    {
        if (is_null($payment_type)) {
            throw new \InvalidArgumentException('non-nullable payment_type cannot be null');
        }
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets requires_shipping
     *
     * @return bool|null
     */
    public function getRequiresShipping()
    {
        return $this->container['requires_shipping'];
    }

    /**
     * Sets requires_shipping
     *
     * @param bool|null $requires_shipping Whether the customer is required to provide a shipping address.
     *
     * @return self
     */
    public function setRequiresShipping($requires_shipping)
    {
        if (is_null($requires_shipping)) {
            throw new \InvalidArgumentException('non-nullable requires_shipping cannot be null');
        }
        $this->container['requires_shipping'] = $requires_shipping;

        return $this;
    }

    /**
     * Gets session_key
     *
     * @return string
     */
    public function getSessionKey()
    {
        return $this->container['session_key'];
    }

    /**
     * Sets session_key
     *
     * @param string $session_key The unique identifier for the payment session. If the same session key has been used,                          the existing payment session will be updated with the new values.
     *
     * @return self
     */
    public function setSessionKey($session_key)
    {
        if (is_null($session_key)) {
            throw new \InvalidArgumentException('non-nullable session_key cannot be null');
        }
        if ((mb_strlen($session_key) > 64)) {
            throw new \InvalidArgumentException('invalid length for $session_key when calling PaymentSessionCreateInput., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($session_key) < 1)) {
            throw new \InvalidArgumentException('invalid length for $session_key when calling PaymentSessionCreateInput., must be bigger than or equal to 1.');
        }

        $this->container['session_key'] = $session_key;

        return $this;
    }

    /**
     * Gets shipping_address
     *
     * @return \Rvvup\Api\Model\AddressInput|null
     */
    public function getShippingAddress()
    {
        return $this->container['shipping_address'];
    }

    /**
     * Sets shipping_address
     *
     * @param \Rvvup\Api\Model\AddressInput|null $shipping_address shipping_address
     *
     * @return self
     */
    public function setShippingAddress($shipping_address)
    {
        if (is_null($shipping_address)) {
            throw new \InvalidArgumentException('non-nullable shipping_address cannot be null');
        }
        $this->container['shipping_address'] = $shipping_address;

        return $this;
    }

    /**
     * Gets shipping_total
     *
     * @return \Rvvup\Api\Model\MoneyInput|null
     */
    public function getShippingTotal()
    {
        return $this->container['shipping_total'];
    }

    /**
     * Sets shipping_total
     *
     * @param \Rvvup\Api\Model\MoneyInput|null $shipping_total shipping_total
     *
     * @return self
     */
    public function setShippingTotal($shipping_total)
    {
        if (is_null($shipping_total)) {
            throw new \InvalidArgumentException('non-nullable shipping_total cannot be null');
        }
        $this->container['shipping_total'] = $shipping_total;

        return $this;
    }

    /**
     * Gets tax_total
     *
     * @return \Rvvup\Api\Model\MoneyInput|null
     */
    public function getTaxTotal()
    {
        return $this->container['tax_total'];
    }

    /**
     * Sets tax_total
     *
     * @param \Rvvup\Api\Model\MoneyInput|null $tax_total tax_total
     *
     * @return self
     */
    public function setTaxTotal($tax_total)
    {
        if (is_null($tax_total)) {
            throw new \InvalidArgumentException('non-nullable tax_total cannot be null');
        }
        $this->container['tax_total'] = $tax_total;

        return $this;
    }

    /**
     * Gets total
     *
     * @return \Rvvup\Api\Model\MoneyInput
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param \Rvvup\Api\Model\MoneyInput $total total
     *
     * @return self
     */
    public function setTotal($total)
    {
        if (is_null($total)) {
            throw new \InvalidArgumentException('non-nullable total cannot be null');
        }
        $this->container['total'] = $total;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


