<?php
/**
 * Checkout
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Rvvup
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rvvup API
 *
 * Rvvup Public API
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: info@rvvup.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Rvvup\Api\Model;

use \ArrayAccess;
use \Rvvup\ObjectSerializer;

/**
 * Checkout Class Doc Comment
 *
 * @category Class
 * @description Checkout object
 * @package  Rvvup
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Checkout implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Checkout';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount' => '\Rvvup\Api\Model\Money',
        'billing_address' => '\Rvvup\Api\Model\Address',
        'cancel_url' => 'string',
        'checkout_template_id' => 'string',
        'created_at' => '\DateTime',
        'customer' => '\Rvvup\Api\Model\Customer',
        'expires_at' => '\DateTime',
        'id' => 'string',
        'items' => '\Rvvup\Api\Model\Item[]',
        'merchant_id' => 'string',
        'metadata' => 'array<string,string>',
        'mode' => '\Rvvup\Api\Model\CheckoutMode',
        'mode_id' => 'string',
        'origin_url' => 'string',
        'payment_link_id' => 'string',
        'payment_session_ids' => 'string[]',
        'pending_url' => 'string',
        'reference' => 'string',
        'source' => '\Rvvup\Api\Model\ApplicationSource',
        'status' => '\Rvvup\Api\Model\CheckoutStatus',
        'success_url' => 'string',
        'token' => 'string',
        'updated_at' => '\DateTime',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amount' => null,
        'billing_address' => null,
        'cancel_url' => null,
        'checkout_template_id' => null,
        'created_at' => 'date-time',
        'customer' => null,
        'expires_at' => 'date-time',
        'id' => null,
        'items' => null,
        'merchant_id' => null,
        'metadata' => null,
        'mode' => null,
        'mode_id' => null,
        'origin_url' => null,
        'payment_link_id' => null,
        'payment_session_ids' => null,
        'pending_url' => null,
        'reference' => null,
        'source' => null,
        'status' => null,
        'success_url' => null,
        'token' => null,
        'updated_at' => 'date-time',
        'url' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'amount' => false,
        'billing_address' => false,
        'cancel_url' => false,
        'checkout_template_id' => false,
        'created_at' => false,
        'customer' => false,
        'expires_at' => false,
        'id' => false,
        'items' => false,
        'merchant_id' => false,
        'metadata' => false,
        'mode' => false,
        'mode_id' => false,
        'origin_url' => false,
        'payment_link_id' => false,
        'payment_session_ids' => false,
        'pending_url' => false,
        'reference' => false,
        'source' => false,
        'status' => false,
        'success_url' => false,
        'token' => false,
        'updated_at' => false,
        'url' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'billing_address' => 'billingAddress',
        'cancel_url' => 'cancelUrl',
        'checkout_template_id' => 'checkoutTemplateId',
        'created_at' => 'createdAt',
        'customer' => 'customer',
        'expires_at' => 'expiresAt',
        'id' => 'id',
        'items' => 'items',
        'merchant_id' => 'merchantId',
        'metadata' => 'metadata',
        'mode' => 'mode',
        'mode_id' => 'modeId',
        'origin_url' => 'originUrl',
        'payment_link_id' => 'paymentLinkId',
        'payment_session_ids' => 'paymentSessionIds',
        'pending_url' => 'pendingUrl',
        'reference' => 'reference',
        'source' => 'source',
        'status' => 'status',
        'success_url' => 'successUrl',
        'token' => 'token',
        'updated_at' => 'updatedAt',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'billing_address' => 'setBillingAddress',
        'cancel_url' => 'setCancelUrl',
        'checkout_template_id' => 'setCheckoutTemplateId',
        'created_at' => 'setCreatedAt',
        'customer' => 'setCustomer',
        'expires_at' => 'setExpiresAt',
        'id' => 'setId',
        'items' => 'setItems',
        'merchant_id' => 'setMerchantId',
        'metadata' => 'setMetadata',
        'mode' => 'setMode',
        'mode_id' => 'setModeId',
        'origin_url' => 'setOriginUrl',
        'payment_link_id' => 'setPaymentLinkId',
        'payment_session_ids' => 'setPaymentSessionIds',
        'pending_url' => 'setPendingUrl',
        'reference' => 'setReference',
        'source' => 'setSource',
        'status' => 'setStatus',
        'success_url' => 'setSuccessUrl',
        'token' => 'setToken',
        'updated_at' => 'setUpdatedAt',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'billing_address' => 'getBillingAddress',
        'cancel_url' => 'getCancelUrl',
        'checkout_template_id' => 'getCheckoutTemplateId',
        'created_at' => 'getCreatedAt',
        'customer' => 'getCustomer',
        'expires_at' => 'getExpiresAt',
        'id' => 'getId',
        'items' => 'getItems',
        'merchant_id' => 'getMerchantId',
        'metadata' => 'getMetadata',
        'mode' => 'getMode',
        'mode_id' => 'getModeId',
        'origin_url' => 'getOriginUrl',
        'payment_link_id' => 'getPaymentLinkId',
        'payment_session_ids' => 'getPaymentSessionIds',
        'pending_url' => 'getPendingUrl',
        'reference' => 'getReference',
        'source' => 'getSource',
        'status' => 'getStatus',
        'success_url' => 'getSuccessUrl',
        'token' => 'getToken',
        'updated_at' => 'getUpdatedAt',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('billing_address', $data ?? [], null);
        $this->setIfExists('cancel_url', $data ?? [], null);
        $this->setIfExists('checkout_template_id', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('expires_at', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('items', $data ?? [], null);
        $this->setIfExists('merchant_id', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('mode', $data ?? [], null);
        $this->setIfExists('mode_id', $data ?? [], null);
        $this->setIfExists('origin_url', $data ?? [], null);
        $this->setIfExists('payment_link_id', $data ?? [], null);
        $this->setIfExists('payment_session_ids', $data ?? [], null);
        $this->setIfExists('pending_url', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('success_url', $data ?? [], null);
        $this->setIfExists('token', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['checkout_template_id'] === null) {
            $invalidProperties[] = "'checkout_template_id' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['expires_at'] === null) {
            $invalidProperties[] = "'expires_at' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['items'] === null) {
            $invalidProperties[] = "'items' can't be null";
        }
        if ($this->container['merchant_id'] === null) {
            $invalidProperties[] = "'merchant_id' can't be null";
        }
        if ($this->container['metadata'] === null) {
            $invalidProperties[] = "'metadata' can't be null";
        }
        if ($this->container['mode'] === null) {
            $invalidProperties[] = "'mode' can't be null";
        }
        if ($this->container['mode_id'] === null) {
            $invalidProperties[] = "'mode_id' can't be null";
        }
        if ($this->container['payment_session_ids'] === null) {
            $invalidProperties[] = "'payment_session_ids' can't be null";
        }
        if ($this->container['source'] === null) {
            $invalidProperties[] = "'source' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['token'] === null) {
            $invalidProperties[] = "'token' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return \Rvvup\Api\Model\Money|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param \Rvvup\Api\Model\Money|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets billing_address
     *
     * @return \Rvvup\Api\Model\Address|null
     */
    public function getBillingAddress()
    {
        return $this->container['billing_address'];
    }

    /**
     * Sets billing_address
     *
     * @param \Rvvup\Api\Model\Address|null $billing_address billing_address
     *
     * @return self
     */
    public function setBillingAddress($billing_address)
    {
        if (is_null($billing_address)) {
            throw new \InvalidArgumentException('non-nullable billing_address cannot be null');
        }
        $this->container['billing_address'] = $billing_address;

        return $this;
    }

    /**
     * Gets cancel_url
     *
     * @return string|null
     */
    public function getCancelUrl()
    {
        return $this->container['cancel_url'];
    }

    /**
     * Sets cancel_url
     *
     * @param string|null $cancel_url The URL to redirect the customer to if the checkout does not complete successfully.
     *
     * @return self
     */
    public function setCancelUrl($cancel_url)
    {
        if (is_null($cancel_url)) {
            throw new \InvalidArgumentException('non-nullable cancel_url cannot be null');
        }
        $this->container['cancel_url'] = $cancel_url;

        return $this;
    }

    /**
     * Gets checkout_template_id
     *
     * @return string
     */
    public function getCheckoutTemplateId()
    {
        return $this->container['checkout_template_id'];
    }

    /**
     * Sets checkout_template_id
     *
     * @param string $checkout_template_id The ID of the checkout template to use for this checkout.
     *
     * @return self
     */
    public function setCheckoutTemplateId($checkout_template_id)
    {
        if (is_null($checkout_template_id)) {
            throw new \InvalidArgumentException('non-nullable checkout_template_id cannot be null');
        }
        $this->container['checkout_template_id'] = $checkout_template_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at The datetime when the checkout was created.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \Rvvup\Api\Model\Customer|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \Rvvup\Api\Model\Customer|null $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            throw new \InvalidArgumentException('non-nullable customer cannot be null');
        }
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets expires_at
     *
     * @return \DateTime
     */
    public function getExpiresAt()
    {
        return $this->container['expires_at'];
    }

    /**
     * Sets expires_at
     *
     * @param \DateTime $expires_at The datetime when the checkout will expire.
     *
     * @return self
     */
    public function setExpiresAt($expires_at)
    {
        if (is_null($expires_at)) {
            throw new \InvalidArgumentException('non-nullable expires_at cannot be null');
        }
        $this->container['expires_at'] = $expires_at;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The unique ID of the checkout.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \Rvvup\Api\Model\Item[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \Rvvup\Api\Model\Item[] $items items
     *
     * @return self
     */
    public function setItems($items)
    {
        if (is_null($items)) {
            throw new \InvalidArgumentException('non-nullable items cannot be null');
        }
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string $merchant_id The ID of the merchant that owns this checkout.
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        if (is_null($merchant_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_id cannot be null');
        }
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return array<string,string>
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array<string,string> $metadata Key value pairs to store additional information about the checkout.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return \Rvvup\Api\Model\CheckoutMode
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param \Rvvup\Api\Model\CheckoutMode|string $mode mode
     *
     * @return self
     */
    public function setMode($mode)
    {
        if (is_null($mode)) {
            throw new \InvalidArgumentException('non-nullable mode cannot be null');
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets mode_id
     *
     * @return string
     */
    public function getModeId()
    {
        return $this->container['mode_id'];
    }

    /**
     * Sets mode_id
     *
     * @param string $mode_id Id related to this checkout mode. The associated AccountStatement's id for the ACCOUNT_STATEMENT mode.The associated PaymentLink's id for the PAYMENT_LINK mode.The checkout's id for the CHECKOUT and VIRTUAL_TERMINAL mode.
     *
     * @return self
     */
    public function setModeId($mode_id)
    {
        if (is_null($mode_id)) {
            throw new \InvalidArgumentException('non-nullable mode_id cannot be null');
        }
        $this->container['mode_id'] = $mode_id;

        return $this;
    }

    /**
     * Gets origin_url
     *
     * @return string|null
     */
    public function getOriginUrl()
    {
        return $this->container['origin_url'];
    }

    /**
     * Sets origin_url
     *
     * @param string|null $origin_url The URL that the customer was on when the checkout was created.
     *
     * @return self
     */
    public function setOriginUrl($origin_url)
    {
        if (is_null($origin_url)) {
            throw new \InvalidArgumentException('non-nullable origin_url cannot be null');
        }
        $this->container['origin_url'] = $origin_url;

        return $this;
    }

    /**
     * Gets payment_link_id
     *
     * @return string|null
     * @deprecated
     */
    public function getPaymentLinkId()
    {
        return $this->container['payment_link_id'];
    }

    /**
     * Sets payment_link_id
     *
     * @param string|null $payment_link_id The ID of the payment link that was used to create this checkout.This field is deprecated and will be removed in a future version.Use the modeId field instead.
     *
     * @return self
     * @deprecated
     */
    public function setPaymentLinkId($payment_link_id)
    {
        if (is_null($payment_link_id)) {
            throw new \InvalidArgumentException('non-nullable payment_link_id cannot be null');
        }
        $this->container['payment_link_id'] = $payment_link_id;

        return $this;
    }

    /**
     * Gets payment_session_ids
     *
     * @return string[]
     */
    public function getPaymentSessionIds()
    {
        return $this->container['payment_session_ids'];
    }

    /**
     * Sets payment_session_ids
     *
     * @param string[] $payment_session_ids The IDs of the payment sessions that were created for this checkout.
     *
     * @return self
     */
    public function setPaymentSessionIds($payment_session_ids)
    {
        if (is_null($payment_session_ids)) {
            throw new \InvalidArgumentException('non-nullable payment_session_ids cannot be null');
        }
        $this->container['payment_session_ids'] = $payment_session_ids;

        return $this;
    }

    /**
     * Gets pending_url
     *
     * @return string|null
     */
    public function getPendingUrl()
    {
        return $this->container['pending_url'];
    }

    /**
     * Sets pending_url
     *
     * @param string|null $pending_url The URL to redirect the customer to if the checkout falls into a pending payment flow.
     *
     * @return self
     */
    public function setPendingUrl($pending_url)
    {
        if (is_null($pending_url)) {
            throw new \InvalidArgumentException('non-nullable pending_url cannot be null');
        }
        $this->container['pending_url'] = $pending_url;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference Your reference to identify the checkout and the subsequently created payment sessions.
     *
     * @return self
     */
    public function setReference($reference)
    {
        if (is_null($reference)) {
            throw new \InvalidArgumentException('non-nullable reference cannot be null');
        }
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets source
     *
     * @return \Rvvup\Api\Model\ApplicationSource
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param \Rvvup\Api\Model\ApplicationSource|string $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Rvvup\Api\Model\CheckoutStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Rvvup\Api\Model\CheckoutStatus|string $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets success_url
     *
     * @return string|null
     */
    public function getSuccessUrl()
    {
        return $this->container['success_url'];
    }

    /**
     * Sets success_url
     *
     * @param string|null $success_url The URL to redirect the customer to after the checkout is completed successfully.
     *
     * @return self
     */
    public function setSuccessUrl($success_url)
    {
        if (is_null($success_url)) {
            throw new \InvalidArgumentException('non-nullable success_url cannot be null');
        }
        $this->container['success_url'] = $success_url;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string $token The checkout session token.
     *
     * @return self
     */
    public function setToken($token)
    {
        if (is_null($token)) {
            throw new \InvalidArgumentException('non-nullable token cannot be null');
        }
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at The datetime when the checkout was last updated.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The URL to the hosted checkout page.
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


