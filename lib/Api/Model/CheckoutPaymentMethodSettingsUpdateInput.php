<?php
/**
 * CheckoutPaymentMethodSettingsUpdateInput
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Rvvup
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rvvup API
 *
 * Rvvup Public API
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: info@rvvup.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Rvvup\Api\Model;

use \ArrayAccess;
use \Rvvup\ObjectSerializer;

/**
 * CheckoutPaymentMethodSettingsUpdateInput Class Doc Comment
 *
 * @category Class
 * @description The payment method settings to be used for the checkout.
 * @package  Rvvup
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CheckoutPaymentMethodSettingsUpdateInput implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CheckoutPaymentMethodSettingsUpdateInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'apple_pay' => '\Rvvup\Api\Model\CheckoutApplePaySettingsUpdateInput',
        'card' => '\Rvvup\Api\Model\CheckoutCardSettingsUpdateInput',
        'clearpay' => '\Rvvup\Api\Model\CheckoutClearpaySettingsUpdateInput',
        'google_pay' => '\Rvvup\Api\Model\CheckoutGooglePaySettingsUpdateInput',
        'klarna' => '\Rvvup\Api\Model\CheckoutKlarnaSettingsUpdateInput',
        'pay_by_bank' => '\Rvvup\Api\Model\CheckoutPayByBankSettingsUpdateInput',
        'zopa_retail_finance' => '\Rvvup\Api\Model\CheckoutZopaRetailFinanceSettingsUpdateInput'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'apple_pay' => null,
        'card' => null,
        'clearpay' => null,
        'google_pay' => null,
        'klarna' => null,
        'pay_by_bank' => null,
        'zopa_retail_finance' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'apple_pay' => false,
        'card' => false,
        'clearpay' => false,
        'google_pay' => false,
        'klarna' => false,
        'pay_by_bank' => false,
        'zopa_retail_finance' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'apple_pay' => 'applePay',
        'card' => 'card',
        'clearpay' => 'clearpay',
        'google_pay' => 'googlePay',
        'klarna' => 'klarna',
        'pay_by_bank' => 'payByBank',
        'zopa_retail_finance' => 'zopaRetailFinance'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'apple_pay' => 'setApplePay',
        'card' => 'setCard',
        'clearpay' => 'setClearpay',
        'google_pay' => 'setGooglePay',
        'klarna' => 'setKlarna',
        'pay_by_bank' => 'setPayByBank',
        'zopa_retail_finance' => 'setZopaRetailFinance'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'apple_pay' => 'getApplePay',
        'card' => 'getCard',
        'clearpay' => 'getClearpay',
        'google_pay' => 'getGooglePay',
        'klarna' => 'getKlarna',
        'pay_by_bank' => 'getPayByBank',
        'zopa_retail_finance' => 'getZopaRetailFinance'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('apple_pay', $data ?? [], null);
        $this->setIfExists('card', $data ?? [], null);
        $this->setIfExists('clearpay', $data ?? [], null);
        $this->setIfExists('google_pay', $data ?? [], null);
        $this->setIfExists('klarna', $data ?? [], null);
        $this->setIfExists('pay_by_bank', $data ?? [], null);
        $this->setIfExists('zopa_retail_finance', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets apple_pay
     *
     * @return \Rvvup\Api\Model\CheckoutApplePaySettingsUpdateInput|null
     */
    public function getApplePay()
    {
        return $this->container['apple_pay'];
    }

    /**
     * Sets apple_pay
     *
     * @param \Rvvup\Api\Model\CheckoutApplePaySettingsUpdateInput|null $apple_pay apple_pay
     *
     * @return self
     */
    public function setApplePay($apple_pay)
    {
        if (is_null($apple_pay)) {
            throw new \InvalidArgumentException('non-nullable apple_pay cannot be null');
        }
        $this->container['apple_pay'] = $apple_pay;

        return $this;
    }

    /**
     * Gets card
     *
     * @return \Rvvup\Api\Model\CheckoutCardSettingsUpdateInput|null
     */
    public function getCard()
    {
        return $this->container['card'];
    }

    /**
     * Sets card
     *
     * @param \Rvvup\Api\Model\CheckoutCardSettingsUpdateInput|null $card card
     *
     * @return self
     */
    public function setCard($card)
    {
        if (is_null($card)) {
            throw new \InvalidArgumentException('non-nullable card cannot be null');
        }
        $this->container['card'] = $card;

        return $this;
    }

    /**
     * Gets clearpay
     *
     * @return \Rvvup\Api\Model\CheckoutClearpaySettingsUpdateInput|null
     */
    public function getClearpay()
    {
        return $this->container['clearpay'];
    }

    /**
     * Sets clearpay
     *
     * @param \Rvvup\Api\Model\CheckoutClearpaySettingsUpdateInput|null $clearpay clearpay
     *
     * @return self
     */
    public function setClearpay($clearpay)
    {
        if (is_null($clearpay)) {
            throw new \InvalidArgumentException('non-nullable clearpay cannot be null');
        }
        $this->container['clearpay'] = $clearpay;

        return $this;
    }

    /**
     * Gets google_pay
     *
     * @return \Rvvup\Api\Model\CheckoutGooglePaySettingsUpdateInput|null
     */
    public function getGooglePay()
    {
        return $this->container['google_pay'];
    }

    /**
     * Sets google_pay
     *
     * @param \Rvvup\Api\Model\CheckoutGooglePaySettingsUpdateInput|null $google_pay google_pay
     *
     * @return self
     */
    public function setGooglePay($google_pay)
    {
        if (is_null($google_pay)) {
            throw new \InvalidArgumentException('non-nullable google_pay cannot be null');
        }
        $this->container['google_pay'] = $google_pay;

        return $this;
    }

    /**
     * Gets klarna
     *
     * @return \Rvvup\Api\Model\CheckoutKlarnaSettingsUpdateInput|null
     */
    public function getKlarna()
    {
        return $this->container['klarna'];
    }

    /**
     * Sets klarna
     *
     * @param \Rvvup\Api\Model\CheckoutKlarnaSettingsUpdateInput|null $klarna klarna
     *
     * @return self
     */
    public function setKlarna($klarna)
    {
        if (is_null($klarna)) {
            throw new \InvalidArgumentException('non-nullable klarna cannot be null');
        }
        $this->container['klarna'] = $klarna;

        return $this;
    }

    /**
     * Gets pay_by_bank
     *
     * @return \Rvvup\Api\Model\CheckoutPayByBankSettingsUpdateInput|null
     */
    public function getPayByBank()
    {
        return $this->container['pay_by_bank'];
    }

    /**
     * Sets pay_by_bank
     *
     * @param \Rvvup\Api\Model\CheckoutPayByBankSettingsUpdateInput|null $pay_by_bank pay_by_bank
     *
     * @return self
     */
    public function setPayByBank($pay_by_bank)
    {
        if (is_null($pay_by_bank)) {
            throw new \InvalidArgumentException('non-nullable pay_by_bank cannot be null');
        }
        $this->container['pay_by_bank'] = $pay_by_bank;

        return $this;
    }

    /**
     * Gets zopa_retail_finance
     *
     * @return \Rvvup\Api\Model\CheckoutZopaRetailFinanceSettingsUpdateInput|null
     */
    public function getZopaRetailFinance()
    {
        return $this->container['zopa_retail_finance'];
    }

    /**
     * Sets zopa_retail_finance
     *
     * @param \Rvvup\Api\Model\CheckoutZopaRetailFinanceSettingsUpdateInput|null $zopa_retail_finance zopa_retail_finance
     *
     * @return self
     */
    public function setZopaRetailFinance($zopa_retail_finance)
    {
        if (is_null($zopa_retail_finance)) {
            throw new \InvalidArgumentException('non-nullable zopa_retail_finance cannot be null');
        }
        $this->container['zopa_retail_finance'] = $zopa_retail_finance;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


