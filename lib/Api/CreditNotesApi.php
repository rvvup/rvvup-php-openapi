<?php
/**
 * CreditNotesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Rvvup
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rvvup API
 *
 * Rvvup Public API
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: info@rvvup.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Rvvup\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Rvvup\ApiException;
use Rvvup\Configuration;
use Rvvup\HeaderSelector;
use Rvvup\ObjectSerializer;

/**
 * CreditNotesApi Class Doc Comment
 *
 * @category Class
 * @package  Rvvup
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CreditNotesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'applyCreditNote' => [
            'application/json',
        ],
        'createCreditNote' => [
            'application/json',
        ],
        'deleteCreditNote' => [
            'application/json',
        ],
        'downloadCreditNote' => [
            'application/json',
        ],
        'finalizeCreditNote' => [
            'application/json',
        ],
        'getCreditNote' => [
            'application/json',
        ],
        'listCreditNotes' => [
            'application/json',
        ],
        'updateCreditNote' => [
            'application/json',
        ],
        'voidCreditNote' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation applyCreditNote
     *
     * Apply a credit note to an invoice
     *
     * @param  string $credit_note_id credit note id (required)
     * @param  string $merchant_id merchant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyCreditNote'] to see the possible values for this operation
     *
     * @throws \Rvvup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Rvvup\Api\Model\CreditNote
     */
    public function applyCreditNote($credit_note_id, $merchant_id, string $contentType = self::contentTypes['applyCreditNote'][0])
    {
        list($response) = $this->applyCreditNoteWithHttpInfo($credit_note_id, $merchant_id, $contentType);
        return $response;
    }

    /**
     * Operation applyCreditNoteWithHttpInfo
     *
     * Apply a credit note to an invoice
     *
     * @param  string $credit_note_id credit note id (required)
     * @param  string $merchant_id merchant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyCreditNote'] to see the possible values for this operation
     *
     * @throws \Rvvup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Rvvup\Api\Model\CreditNote, HTTP status code, HTTP response headers (array of strings)
     */
    public function applyCreditNoteWithHttpInfo($credit_note_id, $merchant_id, string $contentType = self::contentTypes['applyCreditNote'][0])
    {
        $request = $this->applyCreditNoteRequest($credit_note_id, $merchant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Rvvup\Api\Model\CreditNote' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Rvvup\Api\Model\CreditNote' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Rvvup\Api\Model\CreditNote', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Rvvup\Api\Model\CreditNote';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Rvvup\Api\Model\CreditNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation applyCreditNoteAsync
     *
     * Apply a credit note to an invoice
     *
     * @param  string $credit_note_id credit note id (required)
     * @param  string $merchant_id merchant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyCreditNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function applyCreditNoteAsync($credit_note_id, $merchant_id, string $contentType = self::contentTypes['applyCreditNote'][0])
    {
        return $this->applyCreditNoteAsyncWithHttpInfo($credit_note_id, $merchant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation applyCreditNoteAsyncWithHttpInfo
     *
     * Apply a credit note to an invoice
     *
     * @param  string $credit_note_id credit note id (required)
     * @param  string $merchant_id merchant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyCreditNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function applyCreditNoteAsyncWithHttpInfo($credit_note_id, $merchant_id, string $contentType = self::contentTypes['applyCreditNote'][0])
    {
        $returnType = '\Rvvup\Api\Model\CreditNote';
        $request = $this->applyCreditNoteRequest($credit_note_id, $merchant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'applyCreditNote'
     *
     * @param  string $credit_note_id credit note id (required)
     * @param  string $merchant_id merchant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyCreditNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function applyCreditNoteRequest($credit_note_id, $merchant_id, string $contentType = self::contentTypes['applyCreditNote'][0])
    {

        // verify the required parameter 'credit_note_id' is set
        if ($credit_note_id === null || (is_array($credit_note_id) && count($credit_note_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $credit_note_id when calling applyCreditNote'
            );
        }

        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null || (is_array($merchant_id) && count($merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_id when calling applyCreditNote'
            );
        }


        $resourcePath = '/api/2024-03-01/{merchantId}/credit-notes/{creditNoteId}/apply';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($credit_note_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creditNoteId' . '}',
                ObjectSerializer::toPathValue($credit_note_id),
                $resourcePath
            );
        }
        // path params
        if ($merchant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantId' . '}',
                ObjectSerializer::toPathValue($merchant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createCreditNote
     *
     * Create new credit note
     *
     * @param  string $merchant_id merchant id (required)
     * @param  \Rvvup\Api\Model\CreditNoteCreateInput $credit_note_create_input The credit note to create (required)
     * @param  string $idempotency_key Idempotency Key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCreditNote'] to see the possible values for this operation
     *
     * @throws \Rvvup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Rvvup\Api\Model\CreditNote
     */
    public function createCreditNote($merchant_id, $credit_note_create_input, $idempotency_key = null, string $contentType = self::contentTypes['createCreditNote'][0])
    {
        list($response) = $this->createCreditNoteWithHttpInfo($merchant_id, $credit_note_create_input, $idempotency_key, $contentType);
        return $response;
    }

    /**
     * Operation createCreditNoteWithHttpInfo
     *
     * Create new credit note
     *
     * @param  string $merchant_id merchant id (required)
     * @param  \Rvvup\Api\Model\CreditNoteCreateInput $credit_note_create_input The credit note to create (required)
     * @param  string $idempotency_key Idempotency Key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCreditNote'] to see the possible values for this operation
     *
     * @throws \Rvvup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Rvvup\Api\Model\CreditNote, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCreditNoteWithHttpInfo($merchant_id, $credit_note_create_input, $idempotency_key = null, string $contentType = self::contentTypes['createCreditNote'][0])
    {
        $request = $this->createCreditNoteRequest($merchant_id, $credit_note_create_input, $idempotency_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Rvvup\Api\Model\CreditNote' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Rvvup\Api\Model\CreditNote' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Rvvup\Api\Model\CreditNote', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Rvvup\Api\Model\CreditNote';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Rvvup\Api\Model\CreditNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCreditNoteAsync
     *
     * Create new credit note
     *
     * @param  string $merchant_id merchant id (required)
     * @param  \Rvvup\Api\Model\CreditNoteCreateInput $credit_note_create_input The credit note to create (required)
     * @param  string $idempotency_key Idempotency Key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCreditNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCreditNoteAsync($merchant_id, $credit_note_create_input, $idempotency_key = null, string $contentType = self::contentTypes['createCreditNote'][0])
    {
        return $this->createCreditNoteAsyncWithHttpInfo($merchant_id, $credit_note_create_input, $idempotency_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCreditNoteAsyncWithHttpInfo
     *
     * Create new credit note
     *
     * @param  string $merchant_id merchant id (required)
     * @param  \Rvvup\Api\Model\CreditNoteCreateInput $credit_note_create_input The credit note to create (required)
     * @param  string $idempotency_key Idempotency Key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCreditNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCreditNoteAsyncWithHttpInfo($merchant_id, $credit_note_create_input, $idempotency_key = null, string $contentType = self::contentTypes['createCreditNote'][0])
    {
        $returnType = '\Rvvup\Api\Model\CreditNote';
        $request = $this->createCreditNoteRequest($merchant_id, $credit_note_create_input, $idempotency_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCreditNote'
     *
     * @param  string $merchant_id merchant id (required)
     * @param  \Rvvup\Api\Model\CreditNoteCreateInput $credit_note_create_input The credit note to create (required)
     * @param  string $idempotency_key Idempotency Key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCreditNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createCreditNoteRequest($merchant_id, $credit_note_create_input, $idempotency_key = null, string $contentType = self::contentTypes['createCreditNote'][0])
    {

        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null || (is_array($merchant_id) && count($merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_id when calling createCreditNote'
            );
        }

        // verify the required parameter 'credit_note_create_input' is set
        if ($credit_note_create_input === null || (is_array($credit_note_create_input) && count($credit_note_create_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $credit_note_create_input when calling createCreditNote'
            );
        }



        $resourcePath = '/api/2024-03-01/{merchantId}/credit-notes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($idempotency_key !== null) {
            $headerParams['Idempotency-Key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }

        // path params
        if ($merchant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantId' . '}',
                ObjectSerializer::toPathValue($merchant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($credit_note_create_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($credit_note_create_input));
            } else {
                $httpBody = $credit_note_create_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCreditNote
     *
     * Delete a credit note
     *
     * @param  string $credit_note_id credit note id (required)
     * @param  string $merchant_id merchant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCreditNote'] to see the possible values for this operation
     *
     * @throws \Rvvup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCreditNote($credit_note_id, $merchant_id, string $contentType = self::contentTypes['deleteCreditNote'][0])
    {
        $this->deleteCreditNoteWithHttpInfo($credit_note_id, $merchant_id, $contentType);
    }

    /**
     * Operation deleteCreditNoteWithHttpInfo
     *
     * Delete a credit note
     *
     * @param  string $credit_note_id credit note id (required)
     * @param  string $merchant_id merchant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCreditNote'] to see the possible values for this operation
     *
     * @throws \Rvvup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCreditNoteWithHttpInfo($credit_note_id, $merchant_id, string $contentType = self::contentTypes['deleteCreditNote'][0])
    {
        $request = $this->deleteCreditNoteRequest($credit_note_id, $merchant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCreditNoteAsync
     *
     * Delete a credit note
     *
     * @param  string $credit_note_id credit note id (required)
     * @param  string $merchant_id merchant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCreditNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCreditNoteAsync($credit_note_id, $merchant_id, string $contentType = self::contentTypes['deleteCreditNote'][0])
    {
        return $this->deleteCreditNoteAsyncWithHttpInfo($credit_note_id, $merchant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCreditNoteAsyncWithHttpInfo
     *
     * Delete a credit note
     *
     * @param  string $credit_note_id credit note id (required)
     * @param  string $merchant_id merchant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCreditNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCreditNoteAsyncWithHttpInfo($credit_note_id, $merchant_id, string $contentType = self::contentTypes['deleteCreditNote'][0])
    {
        $returnType = '';
        $request = $this->deleteCreditNoteRequest($credit_note_id, $merchant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCreditNote'
     *
     * @param  string $credit_note_id credit note id (required)
     * @param  string $merchant_id merchant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCreditNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCreditNoteRequest($credit_note_id, $merchant_id, string $contentType = self::contentTypes['deleteCreditNote'][0])
    {

        // verify the required parameter 'credit_note_id' is set
        if ($credit_note_id === null || (is_array($credit_note_id) && count($credit_note_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $credit_note_id when calling deleteCreditNote'
            );
        }

        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null || (is_array($merchant_id) && count($merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_id when calling deleteCreditNote'
            );
        }


        $resourcePath = '/api/2024-03-01/{merchantId}/credit-notes/{creditNoteId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($credit_note_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creditNoteId' . '}',
                ObjectSerializer::toPathValue($credit_note_id),
                $resourcePath
            );
        }
        // path params
        if ($merchant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantId' . '}',
                ObjectSerializer::toPathValue($merchant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation downloadCreditNote
     *
     * Get a link to download the credit note
     *
     * @param  string $credit_note_id credit note id (required)
     * @param  string $merchant_id merchant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadCreditNote'] to see the possible values for this operation
     *
     * @throws \Rvvup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Rvvup\Api\Model\CreditNoteDownload
     */
    public function downloadCreditNote($credit_note_id, $merchant_id, string $contentType = self::contentTypes['downloadCreditNote'][0])
    {
        list($response) = $this->downloadCreditNoteWithHttpInfo($credit_note_id, $merchant_id, $contentType);
        return $response;
    }

    /**
     * Operation downloadCreditNoteWithHttpInfo
     *
     * Get a link to download the credit note
     *
     * @param  string $credit_note_id credit note id (required)
     * @param  string $merchant_id merchant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadCreditNote'] to see the possible values for this operation
     *
     * @throws \Rvvup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Rvvup\Api\Model\CreditNoteDownload, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadCreditNoteWithHttpInfo($credit_note_id, $merchant_id, string $contentType = self::contentTypes['downloadCreditNote'][0])
    {
        $request = $this->downloadCreditNoteRequest($credit_note_id, $merchant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Rvvup\Api\Model\CreditNoteDownload' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Rvvup\Api\Model\CreditNoteDownload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Rvvup\Api\Model\CreditNoteDownload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Rvvup\Api\Model\CreditNoteDownload';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Rvvup\Api\Model\CreditNoteDownload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation downloadCreditNoteAsync
     *
     * Get a link to download the credit note
     *
     * @param  string $credit_note_id credit note id (required)
     * @param  string $merchant_id merchant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadCreditNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadCreditNoteAsync($credit_note_id, $merchant_id, string $contentType = self::contentTypes['downloadCreditNote'][0])
    {
        return $this->downloadCreditNoteAsyncWithHttpInfo($credit_note_id, $merchant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation downloadCreditNoteAsyncWithHttpInfo
     *
     * Get a link to download the credit note
     *
     * @param  string $credit_note_id credit note id (required)
     * @param  string $merchant_id merchant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadCreditNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadCreditNoteAsyncWithHttpInfo($credit_note_id, $merchant_id, string $contentType = self::contentTypes['downloadCreditNote'][0])
    {
        $returnType = '\Rvvup\Api\Model\CreditNoteDownload';
        $request = $this->downloadCreditNoteRequest($credit_note_id, $merchant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'downloadCreditNote'
     *
     * @param  string $credit_note_id credit note id (required)
     * @param  string $merchant_id merchant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadCreditNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function downloadCreditNoteRequest($credit_note_id, $merchant_id, string $contentType = self::contentTypes['downloadCreditNote'][0])
    {

        // verify the required parameter 'credit_note_id' is set
        if ($credit_note_id === null || (is_array($credit_note_id) && count($credit_note_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $credit_note_id when calling downloadCreditNote'
            );
        }

        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null || (is_array($merchant_id) && count($merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_id when calling downloadCreditNote'
            );
        }


        $resourcePath = '/api/2024-03-01/{merchantId}/credit-notes/{creditNoteId}/download';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($credit_note_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creditNoteId' . '}',
                ObjectSerializer::toPathValue($credit_note_id),
                $resourcePath
            );
        }
        // path params
        if ($merchant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantId' . '}',
                ObjectSerializer::toPathValue($merchant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation finalizeCreditNote
     *
     * Finalize a credit note
     *
     * @param  string $credit_note_id credit note id (required)
     * @param  string $merchant_id merchant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['finalizeCreditNote'] to see the possible values for this operation
     *
     * @throws \Rvvup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Rvvup\Api\Model\CreditNote
     */
    public function finalizeCreditNote($credit_note_id, $merchant_id, string $contentType = self::contentTypes['finalizeCreditNote'][0])
    {
        list($response) = $this->finalizeCreditNoteWithHttpInfo($credit_note_id, $merchant_id, $contentType);
        return $response;
    }

    /**
     * Operation finalizeCreditNoteWithHttpInfo
     *
     * Finalize a credit note
     *
     * @param  string $credit_note_id credit note id (required)
     * @param  string $merchant_id merchant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['finalizeCreditNote'] to see the possible values for this operation
     *
     * @throws \Rvvup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Rvvup\Api\Model\CreditNote, HTTP status code, HTTP response headers (array of strings)
     */
    public function finalizeCreditNoteWithHttpInfo($credit_note_id, $merchant_id, string $contentType = self::contentTypes['finalizeCreditNote'][0])
    {
        $request = $this->finalizeCreditNoteRequest($credit_note_id, $merchant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Rvvup\Api\Model\CreditNote' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Rvvup\Api\Model\CreditNote' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Rvvup\Api\Model\CreditNote', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Rvvup\Api\Model\CreditNote';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Rvvup\Api\Model\CreditNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation finalizeCreditNoteAsync
     *
     * Finalize a credit note
     *
     * @param  string $credit_note_id credit note id (required)
     * @param  string $merchant_id merchant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['finalizeCreditNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function finalizeCreditNoteAsync($credit_note_id, $merchant_id, string $contentType = self::contentTypes['finalizeCreditNote'][0])
    {
        return $this->finalizeCreditNoteAsyncWithHttpInfo($credit_note_id, $merchant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation finalizeCreditNoteAsyncWithHttpInfo
     *
     * Finalize a credit note
     *
     * @param  string $credit_note_id credit note id (required)
     * @param  string $merchant_id merchant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['finalizeCreditNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function finalizeCreditNoteAsyncWithHttpInfo($credit_note_id, $merchant_id, string $contentType = self::contentTypes['finalizeCreditNote'][0])
    {
        $returnType = '\Rvvup\Api\Model\CreditNote';
        $request = $this->finalizeCreditNoteRequest($credit_note_id, $merchant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'finalizeCreditNote'
     *
     * @param  string $credit_note_id credit note id (required)
     * @param  string $merchant_id merchant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['finalizeCreditNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function finalizeCreditNoteRequest($credit_note_id, $merchant_id, string $contentType = self::contentTypes['finalizeCreditNote'][0])
    {

        // verify the required parameter 'credit_note_id' is set
        if ($credit_note_id === null || (is_array($credit_note_id) && count($credit_note_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $credit_note_id when calling finalizeCreditNote'
            );
        }

        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null || (is_array($merchant_id) && count($merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_id when calling finalizeCreditNote'
            );
        }


        $resourcePath = '/api/2024-03-01/{merchantId}/credit-notes/{creditNoteId}/finalize';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($credit_note_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creditNoteId' . '}',
                ObjectSerializer::toPathValue($credit_note_id),
                $resourcePath
            );
        }
        // path params
        if ($merchant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantId' . '}',
                ObjectSerializer::toPathValue($merchant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCreditNote
     *
     * Get a credit note
     *
     * @param  string $credit_note_id credit note id (required)
     * @param  string $merchant_id merchant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCreditNote'] to see the possible values for this operation
     *
     * @throws \Rvvup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Rvvup\Api\Model\CreditNote
     */
    public function getCreditNote($credit_note_id, $merchant_id, string $contentType = self::contentTypes['getCreditNote'][0])
    {
        list($response) = $this->getCreditNoteWithHttpInfo($credit_note_id, $merchant_id, $contentType);
        return $response;
    }

    /**
     * Operation getCreditNoteWithHttpInfo
     *
     * Get a credit note
     *
     * @param  string $credit_note_id credit note id (required)
     * @param  string $merchant_id merchant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCreditNote'] to see the possible values for this operation
     *
     * @throws \Rvvup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Rvvup\Api\Model\CreditNote, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCreditNoteWithHttpInfo($credit_note_id, $merchant_id, string $contentType = self::contentTypes['getCreditNote'][0])
    {
        $request = $this->getCreditNoteRequest($credit_note_id, $merchant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Rvvup\Api\Model\CreditNote' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Rvvup\Api\Model\CreditNote' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Rvvup\Api\Model\CreditNote', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Rvvup\Api\Model\CreditNote';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Rvvup\Api\Model\CreditNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCreditNoteAsync
     *
     * Get a credit note
     *
     * @param  string $credit_note_id credit note id (required)
     * @param  string $merchant_id merchant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCreditNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCreditNoteAsync($credit_note_id, $merchant_id, string $contentType = self::contentTypes['getCreditNote'][0])
    {
        return $this->getCreditNoteAsyncWithHttpInfo($credit_note_id, $merchant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCreditNoteAsyncWithHttpInfo
     *
     * Get a credit note
     *
     * @param  string $credit_note_id credit note id (required)
     * @param  string $merchant_id merchant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCreditNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCreditNoteAsyncWithHttpInfo($credit_note_id, $merchant_id, string $contentType = self::contentTypes['getCreditNote'][0])
    {
        $returnType = '\Rvvup\Api\Model\CreditNote';
        $request = $this->getCreditNoteRequest($credit_note_id, $merchant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCreditNote'
     *
     * @param  string $credit_note_id credit note id (required)
     * @param  string $merchant_id merchant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCreditNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCreditNoteRequest($credit_note_id, $merchant_id, string $contentType = self::contentTypes['getCreditNote'][0])
    {

        // verify the required parameter 'credit_note_id' is set
        if ($credit_note_id === null || (is_array($credit_note_id) && count($credit_note_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $credit_note_id when calling getCreditNote'
            );
        }

        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null || (is_array($merchant_id) && count($merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_id when calling getCreditNote'
            );
        }


        $resourcePath = '/api/2024-03-01/{merchantId}/credit-notes/{creditNoteId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($credit_note_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creditNoteId' . '}',
                ObjectSerializer::toPathValue($credit_note_id),
                $resourcePath
            );
        }
        // path params
        if ($merchant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantId' . '}',
                ObjectSerializer::toPathValue($merchant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listCreditNotes
     *
     * List credit notes
     *
     * @param  string $merchant_id merchant id (required)
     * @param  int $offset pagination offset (optional)
     * @param  int $limit pagination limit (optional)
     * @param  string $invoice_id Filter credit notes by invoice ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCreditNotes'] to see the possible values for this operation
     *
     * @throws \Rvvup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Rvvup\Api\Model\CreditNotePage
     */
    public function listCreditNotes($merchant_id, $offset = null, $limit = null, $invoice_id = null, string $contentType = self::contentTypes['listCreditNotes'][0])
    {
        list($response) = $this->listCreditNotesWithHttpInfo($merchant_id, $offset, $limit, $invoice_id, $contentType);
        return $response;
    }

    /**
     * Operation listCreditNotesWithHttpInfo
     *
     * List credit notes
     *
     * @param  string $merchant_id merchant id (required)
     * @param  int $offset pagination offset (optional)
     * @param  int $limit pagination limit (optional)
     * @param  string $invoice_id Filter credit notes by invoice ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCreditNotes'] to see the possible values for this operation
     *
     * @throws \Rvvup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Rvvup\Api\Model\CreditNotePage, HTTP status code, HTTP response headers (array of strings)
     */
    public function listCreditNotesWithHttpInfo($merchant_id, $offset = null, $limit = null, $invoice_id = null, string $contentType = self::contentTypes['listCreditNotes'][0])
    {
        $request = $this->listCreditNotesRequest($merchant_id, $offset, $limit, $invoice_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Rvvup\Api\Model\CreditNotePage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Rvvup\Api\Model\CreditNotePage' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Rvvup\Api\Model\CreditNotePage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Rvvup\Api\Model\CreditNotePage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Rvvup\Api\Model\CreditNotePage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listCreditNotesAsync
     *
     * List credit notes
     *
     * @param  string $merchant_id merchant id (required)
     * @param  int $offset pagination offset (optional)
     * @param  int $limit pagination limit (optional)
     * @param  string $invoice_id Filter credit notes by invoice ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCreditNotes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCreditNotesAsync($merchant_id, $offset = null, $limit = null, $invoice_id = null, string $contentType = self::contentTypes['listCreditNotes'][0])
    {
        return $this->listCreditNotesAsyncWithHttpInfo($merchant_id, $offset, $limit, $invoice_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listCreditNotesAsyncWithHttpInfo
     *
     * List credit notes
     *
     * @param  string $merchant_id merchant id (required)
     * @param  int $offset pagination offset (optional)
     * @param  int $limit pagination limit (optional)
     * @param  string $invoice_id Filter credit notes by invoice ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCreditNotes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCreditNotesAsyncWithHttpInfo($merchant_id, $offset = null, $limit = null, $invoice_id = null, string $contentType = self::contentTypes['listCreditNotes'][0])
    {
        $returnType = '\Rvvup\Api\Model\CreditNotePage';
        $request = $this->listCreditNotesRequest($merchant_id, $offset, $limit, $invoice_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listCreditNotes'
     *
     * @param  string $merchant_id merchant id (required)
     * @param  int $offset pagination offset (optional)
     * @param  int $limit pagination limit (optional)
     * @param  string $invoice_id Filter credit notes by invoice ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCreditNotes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listCreditNotesRequest($merchant_id, $offset = null, $limit = null, $invoice_id = null, string $contentType = self::contentTypes['listCreditNotes'][0])
    {

        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null || (is_array($merchant_id) && count($merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_id when calling listCreditNotes'
            );
        }





        $resourcePath = '/api/2024-03-01/{merchantId}/credit-notes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $invoice_id,
            'invoiceId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($merchant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantId' . '}',
                ObjectSerializer::toPathValue($merchant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCreditNote
     *
     * Update a credit note
     *
     * @param  string $credit_note_id credit note id (required)
     * @param  string $merchant_id merchant id (required)
     * @param  \Rvvup\Api\Model\CreditNoteUpdateInput $credit_note_update_input The credit note update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCreditNote'] to see the possible values for this operation
     *
     * @throws \Rvvup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Rvvup\Api\Model\CreditNote
     */
    public function updateCreditNote($credit_note_id, $merchant_id, $credit_note_update_input, string $contentType = self::contentTypes['updateCreditNote'][0])
    {
        list($response) = $this->updateCreditNoteWithHttpInfo($credit_note_id, $merchant_id, $credit_note_update_input, $contentType);
        return $response;
    }

    /**
     * Operation updateCreditNoteWithHttpInfo
     *
     * Update a credit note
     *
     * @param  string $credit_note_id credit note id (required)
     * @param  string $merchant_id merchant id (required)
     * @param  \Rvvup\Api\Model\CreditNoteUpdateInput $credit_note_update_input The credit note update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCreditNote'] to see the possible values for this operation
     *
     * @throws \Rvvup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Rvvup\Api\Model\CreditNote, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCreditNoteWithHttpInfo($credit_note_id, $merchant_id, $credit_note_update_input, string $contentType = self::contentTypes['updateCreditNote'][0])
    {
        $request = $this->updateCreditNoteRequest($credit_note_id, $merchant_id, $credit_note_update_input, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Rvvup\Api\Model\CreditNote' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Rvvup\Api\Model\CreditNote' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Rvvup\Api\Model\CreditNote', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Rvvup\Api\Model\CreditNote';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Rvvup\Api\Model\CreditNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCreditNoteAsync
     *
     * Update a credit note
     *
     * @param  string $credit_note_id credit note id (required)
     * @param  string $merchant_id merchant id (required)
     * @param  \Rvvup\Api\Model\CreditNoteUpdateInput $credit_note_update_input The credit note update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCreditNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCreditNoteAsync($credit_note_id, $merchant_id, $credit_note_update_input, string $contentType = self::contentTypes['updateCreditNote'][0])
    {
        return $this->updateCreditNoteAsyncWithHttpInfo($credit_note_id, $merchant_id, $credit_note_update_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCreditNoteAsyncWithHttpInfo
     *
     * Update a credit note
     *
     * @param  string $credit_note_id credit note id (required)
     * @param  string $merchant_id merchant id (required)
     * @param  \Rvvup\Api\Model\CreditNoteUpdateInput $credit_note_update_input The credit note update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCreditNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCreditNoteAsyncWithHttpInfo($credit_note_id, $merchant_id, $credit_note_update_input, string $contentType = self::contentTypes['updateCreditNote'][0])
    {
        $returnType = '\Rvvup\Api\Model\CreditNote';
        $request = $this->updateCreditNoteRequest($credit_note_id, $merchant_id, $credit_note_update_input, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCreditNote'
     *
     * @param  string $credit_note_id credit note id (required)
     * @param  string $merchant_id merchant id (required)
     * @param  \Rvvup\Api\Model\CreditNoteUpdateInput $credit_note_update_input The credit note update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCreditNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCreditNoteRequest($credit_note_id, $merchant_id, $credit_note_update_input, string $contentType = self::contentTypes['updateCreditNote'][0])
    {

        // verify the required parameter 'credit_note_id' is set
        if ($credit_note_id === null || (is_array($credit_note_id) && count($credit_note_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $credit_note_id when calling updateCreditNote'
            );
        }

        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null || (is_array($merchant_id) && count($merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_id when calling updateCreditNote'
            );
        }

        // verify the required parameter 'credit_note_update_input' is set
        if ($credit_note_update_input === null || (is_array($credit_note_update_input) && count($credit_note_update_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $credit_note_update_input when calling updateCreditNote'
            );
        }


        $resourcePath = '/api/2024-03-01/{merchantId}/credit-notes/{creditNoteId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($credit_note_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creditNoteId' . '}',
                ObjectSerializer::toPathValue($credit_note_id),
                $resourcePath
            );
        }
        // path params
        if ($merchant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantId' . '}',
                ObjectSerializer::toPathValue($merchant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($credit_note_update_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($credit_note_update_input));
            } else {
                $httpBody = $credit_note_update_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation voidCreditNote
     *
     * Void a credit note
     *
     * @param  string $credit_note_id credit note id (required)
     * @param  string $merchant_id merchant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['voidCreditNote'] to see the possible values for this operation
     *
     * @throws \Rvvup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Rvvup\Api\Model\CreditNote
     */
    public function voidCreditNote($credit_note_id, $merchant_id, string $contentType = self::contentTypes['voidCreditNote'][0])
    {
        list($response) = $this->voidCreditNoteWithHttpInfo($credit_note_id, $merchant_id, $contentType);
        return $response;
    }

    /**
     * Operation voidCreditNoteWithHttpInfo
     *
     * Void a credit note
     *
     * @param  string $credit_note_id credit note id (required)
     * @param  string $merchant_id merchant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['voidCreditNote'] to see the possible values for this operation
     *
     * @throws \Rvvup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Rvvup\Api\Model\CreditNote, HTTP status code, HTTP response headers (array of strings)
     */
    public function voidCreditNoteWithHttpInfo($credit_note_id, $merchant_id, string $contentType = self::contentTypes['voidCreditNote'][0])
    {
        $request = $this->voidCreditNoteRequest($credit_note_id, $merchant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Rvvup\Api\Model\CreditNote' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Rvvup\Api\Model\CreditNote' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Rvvup\Api\Model\CreditNote', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Rvvup\Api\Model\CreditNote';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Rvvup\Api\Model\CreditNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation voidCreditNoteAsync
     *
     * Void a credit note
     *
     * @param  string $credit_note_id credit note id (required)
     * @param  string $merchant_id merchant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['voidCreditNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function voidCreditNoteAsync($credit_note_id, $merchant_id, string $contentType = self::contentTypes['voidCreditNote'][0])
    {
        return $this->voidCreditNoteAsyncWithHttpInfo($credit_note_id, $merchant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation voidCreditNoteAsyncWithHttpInfo
     *
     * Void a credit note
     *
     * @param  string $credit_note_id credit note id (required)
     * @param  string $merchant_id merchant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['voidCreditNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function voidCreditNoteAsyncWithHttpInfo($credit_note_id, $merchant_id, string $contentType = self::contentTypes['voidCreditNote'][0])
    {
        $returnType = '\Rvvup\Api\Model\CreditNote';
        $request = $this->voidCreditNoteRequest($credit_note_id, $merchant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'voidCreditNote'
     *
     * @param  string $credit_note_id credit note id (required)
     * @param  string $merchant_id merchant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['voidCreditNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function voidCreditNoteRequest($credit_note_id, $merchant_id, string $contentType = self::contentTypes['voidCreditNote'][0])
    {

        // verify the required parameter 'credit_note_id' is set
        if ($credit_note_id === null || (is_array($credit_note_id) && count($credit_note_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $credit_note_id when calling voidCreditNote'
            );
        }

        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null || (is_array($merchant_id) && count($merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_id when calling voidCreditNote'
            );
        }


        $resourcePath = '/api/2024-03-01/{merchantId}/credit-notes/{creditNoteId}/void';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($credit_note_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creditNoteId' . '}',
                ObjectSerializer::toPathValue($credit_note_id),
                $resourcePath
            );
        }
        // path params
        if ($merchant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantId' . '}',
                ObjectSerializer::toPathValue($merchant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
