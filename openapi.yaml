openapi: 3.0.1
info:
  contact:
    email: info@rvvup.com
    url: https://rvvup.com
  description: Rvvup Public API
  title: Rvvup API
  version: 2024-03-01
externalDocs:
  description: Rvvup Developer Documentation
  url: https://docs.rvvup.com
security:
  - apiKey: []
paths:
  /api/2024-03-01/{merchantId}/accounts/statements:
    post:
      description: Creates a new account statement
      operationId: createAccountStatement
      parameters:
        - description: Merchant ID
          in: path
          name: merchantId
          required: true
          schema:
            type: string
        - description: Idempotency Key
          in: header
          name: Idempotency-Key
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountStatementCreateInput"
        description: The account statement to create
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountStatement"
          description: The created account statement
        "400":
          description: Validation failed
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
        - apiKey: []
      summary: Create a new account statement
      tags:
        - Account Statements
        - Public
  /api/2024-03-01/{merchantId}/accounts/statements/{accountStatementId}:
    get:
      description: Get an account statement by ID
      operationId: getAccountStatement
      parameters:
        - description: Merchant ID
          in: path
          name: merchantId
          required: true
          schema:
            type: string
        - description: Account Statement ID
          in: path
          name: accountStatementId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountStatement"
          description: The account statement
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Account statement not found
      security:
        - apiKey: []
      summary: Get an account statement
      tags:
        - Account Statements
        - Public
  /api/2024-03-01/{merchantId}/accounts/statements/{accountStatementId}/checkouts/{checkoutId}:
    get:
      description: Get a checkout for an account statement by ID
      operationId: getCheckoutForAccountStatement
      parameters:
        - description: Merchant ID
          in: path
          name: merchantId
          required: true
          schema:
            type: string
        - description: Account Statement ID
          in: path
          name: accountStatementId
          required: true
          schema:
            type: string
        - description: Checkout ID
          in: path
          name: checkoutId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
          description: The checkout
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Account statement not found
      security:
        - apiKey: []
      summary: Get a checkout for an account statement
      tags:
        - Account Statements
        - Public
  /api/2024-03-01/{merchantId}/accounts/statements/{accountStatementId}/theme:
    get:
      description: Gets the theme for an account statement. The theme is used to style
        the page.
      operationId: getThemeForAccountStatement
      parameters:
        - description: Merchant ID
          in: path
          name: merchantId
          required: true
          schema:
            type: string
        - description: Account Statement ID
          in: path
          name: accountStatementId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Theme"
          description: The theme
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Theme not found
      security:
        - apiKey: []
      summary: Get the theme for an account statement
      tags:
        - Account Statements
        - Public
  /api/2024-03-01/{merchantId}/chaser-plans:
    get:
      description: List chaser plans
      operationId: listChaserPlans
      parameters:
        - description: pagination offset
          in: query
          name: offset
          schema:
            type: integer
            format: int64
        - description: pagination limit
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChaserPlanPage"
          description: List of chaser plans
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
        - apiKey: []
      summary: List Chaser Plans
      tags:
        - Chaser Plans
        - Public
    post:
      description: Creates a new chaser plan.
      operationId: createChaserPlan
      parameters:
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
        - description: Idempotency Key
          in: header
          name: Idempotency-Key
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChaserPlanCreateInput"
        description: The chaser plan to create
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChaserPlan"
          description: The created chaser plan
        "400":
          description: Validation failed
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
        - apiKey: []
      summary: Create new chaser plan
      tags:
        - Chaser Plans
        - Public
  /api/2024-03-01/{merchantId}/chaser-plans/{chaserPlanId}:
    get:
      description: Get a chaser plan by id
      operationId: getChaserPlan
      parameters:
        - description: chaser plan id
          in: path
          name: chaserPlanId
          required: true
          schema:
            type: string
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChaserPlan"
          description: Chaser plan
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Chaser plan not found
      security:
        - apiKey: []
      summary: Get a chaser plan
      tags:
        - Chaser Plans
        - Public
  /api/2024-03-01/{merchantId}/checkout-templates:
    get:
      description: List checkout templates
      operationId: listCheckoutTemplates
      parameters:
        - description: pagination offset
          in: query
          name: offset
          schema:
            type: integer
            format: int64
        - description: pagination limit
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckoutTemplatePage"
          description: List of checkout templates
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
        - apiKey: []
      summary: List checkout templates
      tags:
        - Checkout Templates
        - Public
    post:
      description: Creates a new checkout template.
      operationId: createCheckoutTemplate
      parameters:
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CheckoutTemplateCreateInput"
        description: The checkout template to create
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckoutTemplate"
          description: The created checkout template
        "400":
          description: Validation failed
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
        - apiKey: []
      summary: Create new checkout template
      tags:
        - Checkout Templates
        - Public
  /api/2024-03-01/{merchantId}/checkout-templates/{checkoutTemplateId}:
    get:
      description: Get a checkout template by id
      operationId: getCheckoutTemplate
      parameters:
        - description: checkout template id
          in: path
          name: checkoutTemplateId
          required: true
          schema:
            type: string
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckoutTemplate"
          description: Checkout Template
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Checkout template not found
      security:
        - apiKey: []
      summary: Get a checkout template
      tags:
        - Checkout Templates
        - Public
    patch:
      description: Update a checkout template
      operationId: updateCheckoutTemplate
      parameters:
        - description: checkout template id
          in: path
          name: checkoutTemplateId
          required: true
          schema:
            type: string
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CheckoutTemplateUpdateInput"
        description: The checkout template to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckoutTemplate"
          description: The updated Checkout Template
        "400":
          description: Validation failed
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Checkout template not found
      security:
        - apiKey: []
      summary: Update a checkout template
      tags:
        - Checkout Templates
        - Public
  /api/2024-03-01/{merchantId}/checkouts:
    get:
      description: List checkouts
      operationId: listCheckouts
      parameters:
        - description: pagination offset
          in: query
          name: offset
          schema:
            type: integer
            format: int64
        - description: pagination limit
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckoutPage"
          description: List of checkouts
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
        - apiKey: []
      summary: List checkouts
      tags:
        - Checkouts
        - Public
    post:
      description: Creates a new checkout.
      operationId: createCheckout
      parameters:
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
        - description: Idempotency Key
          in: header
          name: Idempotency-Key
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CheckoutCreateInput"
        description: The Checkout to create
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
          description: The created checkout
        "400":
          description: Validation failed
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
        - apiKey: []
      summary: Create new checkout
      tags:
        - Checkouts
        - Public
  /api/2024-03-01/{merchantId}/checkouts/{checkoutId}:
    get:
      description: Get a checkout by id
      operationId: getCheckout
      parameters:
        - description: checkout id
          in: path
          name: checkoutId
          required: true
          schema:
            type: string
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
        - description: Accept header
          in: header
          name: Accept
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            application/schema+json:
              schema:
                type: string
          description: Checkout
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Checkout not found
      security:
        - apiKey: []
      summary: Get a checkout
      tags:
        - Checkouts
        - Public
  /api/2024-03-01/{merchantId}/checkouts/{checkoutId}/payment-methods:
    get:
      description: Lists the currently eligible payment methods for a checkout. The
        payment method status and checkout template settings are used to determine
        the eligible methods.
      operationId: listCheckoutPaymentMethods
      parameters:
        - description: checkout id
          in: path
          name: checkoutId
          required: true
          schema:
            type: string
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
        - description: pagination offset
          in: query
          name: offset
          schema:
            type: integer
            format: int64
        - description: pagination limit
          in: query
          name: limit
          schema:
            type: integer
            format: int32
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentMethodDetailsPage"
          description: Checkout
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Not found
      security:
        - apiKey: []
      summary: Get payment methods for a checkout
      tags:
        - Checkouts
        - Public
  /api/2024-03-01/{merchantId}/checkouts/{checkoutId}/payment-sessions:
    post:
      description: Creates a payment session with a new active payment.
      operationId: createPaymentSession
      parameters:
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
        - description: checkout id
          in: path
          name: checkoutId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentSessionCreateInput"
        description: The Payment Session to create
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentSession"
          description: The created payment session
        "400":
          description: Validation failed
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
        - apiKey: []
      summary: Create a payment session
      tags:
        - Payment Sessions
        - Public
  /api/2024-03-01/{merchantId}/checkouts/{checkoutId}/payment-sessions/{paymentSessionId}:
    get:
      description: Get a payment session by id.
      operationId: getPaymentSession
      parameters:
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
        - description: checkout id
          in: path
          name: checkoutId
          required: true
          schema:
            type: string
        - description: payment session id
          in: path
          name: paymentSessionId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentSession"
          description: Payment Session
        "400":
          description: Validation failed
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
        - apiKey: []
      summary: Get a payment session
      tags:
        - Payment Sessions
        - Public
  /api/2024-03-01/{merchantId}/checkouts/{checkoutId}/payment-sessions/{paymentSessionId}/refunds:
    post:
      description: Creates a refund for a payment session.
      operationId: createRefund
      parameters:
        - description: The merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
        - description: The checkout id
          in: path
          name: checkoutId
          required: true
          schema:
            type: string
        - description: The payment session id
          in: path
          name: paymentSessionId
          required: true
          schema:
            type: string
        - description: Idempotency Key
          in: header
          name: Idempotency-Key
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefundCreateInput"
        description: The refund to create
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Refund"
          description: The created refund
        "400":
          description: Validation failed
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
        - apiKey: []
      summary: Create a refund
      tags:
        - Refunds
        - Public
  /api/2024-03-01/{merchantId}/checkouts/{checkoutId}/payment-sessions/{paymentSessionId}/shipment-tracking:
    post:
      operationId: createShipmentTrackingWithCheckout
      parameters:
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
        - description: payment session id
          in: path
          name: paymentSessionId
          required: true
          schema:
            type: string
        - description: checkout id
          in: path
          name: checkoutId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShipmentTrackingCreateInput"
        description: Input for adding new shipment tracking
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShipmentTracking"
          description: Shipment tracking entry created successfully
        "400":
          description: Validation failed
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
        - apiKey: []
      summary: Create a shipment tracking entry for a payment session
      tags:
        - Shipment Tracking
        - Public
  /api/2024-03-01/{merchantId}/checkouts/{checkoutId}/theme:
    get:
      description: Gets the theme for a checkout. The theme is used to style the checkout
        page.
      operationId: getThemeForCheckout
      parameters:
        - description: Merchant ID
          in: path
          name: merchantId
          required: true
          schema:
            type: string
        - description: Checkout ID
          in: path
          name: checkoutId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Theme"
          description: The theme
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Theme not found
      security:
        - apiKey: []
      summary: Get the theme for a checkout
      tags:
        - Checkouts
        - Public
  /api/2024-03-01/{merchantId}/connections:
    get:
      description: List connections by Merchant ID
      operationId: listConnections
      parameters:
        - description: pagination offset
          in: query
          name: offset
          schema:
            type: integer
            format: int64
        - description: pagination limit
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: Merchant ID
          in: path
          name: merchantId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectionPage"
          description: List of connections
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
        - apiKey: []
      summary: List connections
      tags:
        - Connections
        - Public
    put:
      description: Creates a new connection or updates an existing connection.
      operationId: createConnection
      parameters:
        - description: Merchant ID
          in: path
          name: merchantId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectionCreateInput"
        description: The connection to create
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connection"
          description: The connection
        "400":
          description: Validation failed
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
        - apiKey: []
      summary: Create a new connection or updates an existing connection.
      tags:
        - Connections
        - Public
  /api/2024-03-01/{merchantId}/connections/{connectionId}:
    delete:
      description: Disconnect a connection
      operationId: disconnectConnection
      parameters:
        - description: Merchant ID
          in: path
          name: merchantId
          required: true
          schema:
            type: string
        - description: Connection ID
          in: path
          name: connectionId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connection"
          description: The Connection
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Connection not found
      security:
        - apiKey: []
      summary: Disconnect a connection
      tags:
        - Connections
        - Public
    get:
      description: Get a connection by ID
      operationId: getConnection
      parameters:
        - description: Merchant ID
          in: path
          name: merchantId
          required: true
          schema:
            type: string
        - description: Connection ID
          in: path
          name: connectionId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connection"
          description: The connection
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Connection not found
      security:
        - apiKey: []
      summary: Get a connection
      tags:
        - Connections
        - Public
  /api/2024-03-01/{merchantId}/credit-notes:
    get:
      description: List credit notes
      operationId: listCreditNotes
      parameters:
        - description: pagination offset
          in: query
          name: offset
          schema:
            type: integer
            format: int64
        - description: pagination limit
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: Filter credit notes by invoice ID
          in: query
          name: invoiceId
          schema:
            type: string
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreditNotePage"
          description: List of credit notes
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
        - apiKey: []
      summary: List credit notes
      tags:
        - Credit Notes
        - Public
    post:
      description: Creates a new credit note.
      operationId: createCreditNote
      parameters:
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
        - description: Idempotency Key
          in: header
          name: Idempotency-Key
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreditNoteCreateInput"
        description: The credit note to create
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreditNote"
          description: The created credit note
        "400":
          description: Validation failed
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
        - apiKey: []
      summary: Create new credit note
      tags:
        - Credit Notes
        - Public
  /api/2024-03-01/{merchantId}/credit-notes/{creditNoteId}:
    delete:
      description: Delete a draft credit note
      operationId: deleteCreditNote
      parameters:
        - description: credit note id
          in: path
          name: creditNoteId
          required: true
          schema:
            type: string
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Delete successful
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Credit note not found
      security:
        - apiKey: []
      summary: Delete a credit note
      tags:
        - Credit Notes
        - Public
    get:
      description: Get a credit note by id
      operationId: getCreditNote
      parameters:
        - description: credit note id
          in: path
          name: creditNoteId
          required: true
          schema:
            type: string
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreditNote"
          description: Credit note
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Credit note not found
      security:
        - apiKey: []
      summary: Get a credit note
      tags:
        - Credit Notes
        - Public
    put:
      description: Update a draft credit note.
      operationId: updateCreditNote
      parameters:
        - description: credit note id
          in: path
          name: creditNoteId
          required: true
          schema:
            type: string
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreditNoteUpdateInput"
        description: The credit note update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreditNote"
          description: The updated credit note
        "400":
          description: Validation failed
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
        - apiKey: []
      summary: Update a credit note
      tags:
        - Credit Notes
        - Public
  /api/2024-03-01/{merchantId}/credit-notes/{creditNoteId}/apply:
    post:
      description: Apply a credit note to an invoice
      operationId: applyCreditNote
      parameters:
        - description: credit note id
          in: path
          name: creditNoteId
          required: true
          schema:
            type: string
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreditNote"
          description: Credit note
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Credit note not found
      security:
        - apiKey: []
      summary: Apply a credit note to an invoice
      tags:
        - Credit Notes
        - Public
  /api/2024-03-01/{merchantId}/credit-notes/{creditNoteId}/download:
    post:
      description: Get a link to download the credit note
      operationId: downloadCreditNote
      parameters:
        - description: credit note id
          in: path
          name: creditNoteId
          required: true
          schema:
            type: string
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreditNoteDownload"
          description: Credit note download
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Credit note not found
      security:
        - apiKey: []
      summary: Get a link to download the credit note
      tags:
        - Credit Notes
        - Public
  /api/2024-03-01/{merchantId}/credit-notes/{creditNoteId}/finalize:
    post:
      description: Finalize a credit note
      operationId: finalizeCreditNote
      parameters:
        - description: credit note id
          in: path
          name: creditNoteId
          required: true
          schema:
            type: string
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreditNote"
          description: Credit note
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Credit note not found
      security:
        - apiKey: []
      summary: Finalize a credit note
      tags:
        - Credit Notes
        - Public
  /api/2024-03-01/{merchantId}/credit-notes/{creditNoteId}/void:
    post:
      description: Void an open credit note
      operationId: voidCreditNote
      parameters:
        - description: credit note id
          in: path
          name: creditNoteId
          required: true
          schema:
            type: string
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreditNote"
          description: Credit note
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Credit note not found
      security:
        - apiKey: []
      summary: Void a credit note
      tags:
        - Credit Notes
        - Public
  /api/2024-03-01/{merchantId}/customer-accounts:
    get:
      description: Get customer accounts
      operationId: getCustomerAccounts
      parameters:
        - description: pagination offset
          in: query
          name: offset
          schema:
            type: integer
            format: int64
        - description: pagination limit
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: search query
          in: query
          name: q
          schema:
            type: string
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerAccountPage"
          description: List of customer accounts
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Customer account not found
      security:
        - apiKey: []
      summary: Get customer accounts
      tags:
        - Customer Accounts
        - Public
    post:
      description: Create a customer account
      operationId: createCustomerAccount
      parameters:
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerAccountCreateInput"
        description: The Customer Account to create
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerAccount"
          description: Customer account
        "400":
          description: Validation failed
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Customer account not found
      security:
        - apiKey: []
      summary: Create a customer account
      tags:
        - Customer Accounts
        - Public
  /api/2024-03-01/{merchantId}/customer-accounts/{customerAccountId}:
    get:
      description: Get a customer account by id
      operationId: getCustomerAccount
      parameters:
        - description: customer account id
          in: path
          name: customerAccountId
          required: true
          schema:
            type: string
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerAccount"
          description: Customer account
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Customer account not found
      security:
        - apiKey: []
      summary: Get a customer account
      tags:
        - Customer Accounts
        - Public
  /api/2024-03-01/{merchantId}/customer-accounts/{customerAccountId}/invoices:
    get:
      description: Get list of invoices for customer account by id
      operationId: listInvoicesForCustomerAccount
      parameters:
        - description: pagination offset
          in: query
          name: offset
          schema:
            type: integer
            format: int64
        - description: pagination limit
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: customer account id
          in: path
          name: customerAccountId
          required: true
          schema:
            type: string
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvoicePage"
          description: Invoices
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Customer account not found
      security:
        - apiKey: []
      summary: Get list of invoices for customer account
      tags:
        - Customer Accounts
        - Public
  /api/2024-03-01/{merchantId}/domains:
    get:
      description: List merchant domains
      operationId: listMerchantDomains
      parameters:
        - description: pagination offset
          in: query
          name: offset
          schema:
            type: integer
            format: int64
        - description: pagination limit
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MerchantDomainsPage"
          description: List of merchant domains
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
        - apiKey: []
      summary: List merchant domains
      tags:
        - Merchant Domains
        - Public
    post:
      description: "Add domains to a merchant, this will be used for various purposes\
        \ such as restrict domains for CORS etc."
      operationId: createMerchantDomains
      parameters:
        - description: Idempotency Key
          in: header
          name: Idempotency-Key
          schema:
            type: string
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MerchantDomainsCreateInput"
        description: Input for adding new domains to the merchant
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MerchantDomainsPage"
          description: The domains added to the merchant
        "400":
          description: Validation failed
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
        - apiKey: []
      summary: Create new merchant domains
      tags:
        - Merchant Domains
        - Public
  /api/2024-03-01/{merchantId}/domains/{merchantDomainId}:
    delete:
      description: Delete a merchant domain
      operationId: deleteMerchantDomain
      parameters:
        - description: Merchant ID
          in: path
          name: merchantId
          required: true
          schema:
            type: string
        - description: Merchant Domain ID
          in: path
          name: merchantDomainId
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Delete successful
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Merchant domain not found
      security:
        - apiKey: []
      summary: Delete a merchant domain
      tags:
        - Merchant Domains
        - Public
  /api/2024-03-01/{merchantId}/invoices:
    get:
      description: List invoices
      operationId: listInvoices
      parameters:
        - description: pagination offset
          in: query
          name: offset
          schema:
            type: integer
            format: int64
        - description: pagination limit
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: invoice search query
          in: query
          name: q
          schema:
            type: string
        - description: filter to a customer account
          in: query
          name: customerAccountId
          schema:
            type: string
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvoicePage"
          description: List of invoices
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
        - apiKey: []
      summary: List invoices
      tags:
        - Invoices
        - Public
    post:
      description: Creates a new invoice.
      operationId: createInvoice
      parameters:
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
        - description: Idempotency Key
          in: header
          name: Idempotency-Key
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InvoiceCreateInput"
        description: The invoice to create
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
          description: The created invoice
        "400":
          description: Validation failed
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
        - apiKey: []
      summary: Create new invoice
      tags:
        - Invoices
        - Public
  /api/2024-03-01/{merchantId}/invoices/{invoiceId}:
    delete:
      description: Deletes a draft invoice.
      operationId: deleteInvoice
      parameters:
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
        - description: invoice id
          in: path
          name: invoiceId
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Delete successful
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Invoice not found
      security:
        - apiKey: []
      summary: Delete a draft invoice
      tags:
        - Invoices
        - Public
    get:
      description: Get a invoice by id
      operationId: getInvoice
      parameters:
        - description: invoice id
          in: path
          name: invoiceId
          required: true
          schema:
            type: string
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
          description: Invoice
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Invoice not found
      security:
        - apiKey: []
      summary: Get a invoice
      tags:
        - Invoices
        - Public
    put:
      description: Update a draft invoice.
      operationId: updateInvoice
      parameters:
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
        - description: invoice id
          in: path
          name: invoiceId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InvoiceUpdateInputDto"
        description: The invoice update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
          description: The updated invoice
        "400":
          description: Validation failed
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
        - apiKey: []
      summary: Update an invoice
      tags:
        - Invoices
        - Public
  /api/2024-03-01/{merchantId}/invoices/{invoiceId}/checkouts/{checkoutId}:
    get:
      description: Get a checkout for an invoice by ID
      operationId: getCheckoutForInvoice
      parameters:
        - description: Merchant ID
          in: path
          name: merchantId
          required: true
          schema:
            type: string
        - description: Invoice ID
          in: path
          name: invoiceId
          required: true
          schema:
            type: string
        - description: Checkout ID
          in: path
          name: checkoutId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
          description: The checkout
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Invoice not found
      security:
        - apiKey: []
      summary: Get a checkout for an invoice
      tags:
        - Invoices
        - Public
  /api/2024-03-01/{merchantId}/invoices/{invoiceId}/credit-notes:
    get:
      description: List credit notes for an invoice
      operationId: listCreditNotesForInvoice
      parameters:
        - description: pagination offset
          in: query
          name: offset
          schema:
            type: integer
            format: int64
        - description: pagination limit
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
        - description: invoice id
          in: path
          name: invoiceId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreditNotePage"
          description: List of credit notes
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
        - apiKey: []
      summary: List credit notes for an invoice
      tags:
        - Invoices
        - Public
  /api/2024-03-01/{merchantId}/invoices/{invoiceId}/credit-notes/{creditNoteId}/download:
    get:
      description: Get a link to download the credit note
      operationId: downloadCreditNoteForInvoice
      parameters:
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
        - description: invoice id
          in: path
          name: invoiceId
          required: true
          schema:
            type: string
        - description: credit note id
          in: path
          name: creditNoteId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreditNoteDownload"
          description: Credit note download
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Credit note not found
      security:
        - apiKey: []
      summary: Get a link to download the credit note
      tags:
        - Invoices
        - Public
  /api/2024-03-01/{merchantId}/invoices/{invoiceId}/download:
    get:
      description: Get a link to download the invoice
      operationId: downloadInvoice
      parameters:
        - description: Merchant ID
          in: path
          name: merchantId
          required: true
          schema:
            type: string
        - description: Invoice ID
          in: path
          name: invoiceId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvoiceDownload"
          description: The invoice download object
        "400":
          description: Request invalid. Normally if the invoice is in a DRAFT status
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Invoice not found
      security:
        - apiKey: []
      summary: Get a link to download the invoice
      tags:
        - Invoices
        - Public
  /api/2024-03-01/{merchantId}/invoices/{invoiceId}/finalize:
    post:
      description: Finalize an invoice by id
      operationId: finalizeInvoice
      parameters:
        - description: invoice id
          in: path
          name: invoiceId
          required: true
          schema:
            type: string
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
          description: Invoice
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Invoice not found
      security:
        - apiKey: []
      summary: Finalize an invoice
      tags:
        - Invoices
        - Public
  /api/2024-03-01/{merchantId}/invoices/{invoiceId}/notifications:
    get:
      description: List invoice notifications
      operationId: listInvoiceNotifications
      parameters:
        - description: pagination offset
          in: query
          name: offset
          schema:
            type: integer
            format: int64
        - description: pagination limit
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
        - description: invoice id
          in: path
          name: invoiceId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvoiceNotificationPage"
          description: List of invoice notifications
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
        - apiKey: []
      summary: List invoice notifications
      tags:
        - Invoices
        - Public
    post:
      description: Notify a customer of an invoice
      operationId: createInvoiceNotification
      parameters:
        - description: invoice id
          in: path
          name: invoiceId
          required: true
          schema:
            type: string
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InvoiceNotificationInput"
        description: The notification request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvoiceNotification"
          description: Invoice Notification
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Invoice not found
      security:
        - apiKey: []
      summary: Notify a customer of an invoice
      tags:
        - Invoices
        - Public
  /api/2024-03-01/{merchantId}/invoices/{invoiceId}/refresh-url:
    post:
      description: Refresh an invoice url
      operationId: refreshInvoiceUrl
      parameters:
        - description: invoice id
          in: path
          name: invoiceId
          required: true
          schema:
            type: string
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
          description: Invoice
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Invoice not found
      security:
        - apiKey: []
      summary: Refresh an invoice url
      tags:
        - Invoices
        - Public
  /api/2024-03-01/{merchantId}/invoices/{invoiceId}/void:
    post:
      description: Void an invoice by id
      operationId: voidInvoice
      parameters:
        - description: invoice id
          in: path
          name: invoiceId
          required: true
          schema:
            type: string
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
          description: Invoice
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Invoice not found
      security:
        - apiKey: []
      summary: Void an open invoice
      tags:
        - Invoices
        - Public
  /api/2024-03-01/{merchantId}/notification-subscriptions:
    get:
      description: List notification subscriptions.
      operationId: listNotificationSubscriptions
      parameters:
        - description: pagination offset
          in: query
          name: offset
          schema:
            type: integer
            format: int64
        - description: pagination limit
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: Merchant ID
          in: path
          name: merchantId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationSubscriptionPage"
          description: Page of notification subscriptions
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Notification Subscription not found
      security:
        - apiKey: []
      summary: List notification subscriptions.
      tags:
        - Notifications
        - Public
    post:
      description: Create a new notification subscription.
      operationId: createNotificationSubscription
      parameters:
        - description: Merchant ID
          in: path
          name: merchantId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotificationSubscriptionCreateInput"
        description: The notification subscription to create
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationSubscription"
          description: The notification subscription
        "400":
          description: Validation failed
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
        - apiKey: []
      summary: Create a new notification subscription.
      tags:
        - Notifications
        - Public
  /api/2024-03-01/{merchantId}/notification-subscriptions/{id}:
    get:
      description: Get a notification subscription by ID
      operationId: getNotificationSubscription
      parameters:
        - description: Merchant ID
          in: path
          name: merchantId
          required: true
          schema:
            type: string
        - description: Notification Subscription ID
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationSubscription"
          description: The notification subscription
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Notification Subscription not found
      security:
        - apiKey: []
      summary: Get a notification subscription
      tags:
        - Notifications
        - Public
  /api/2024-03-01/{merchantId}/orders:
    get:
      description: Search for orders with filters
      operationId: getOrders
      parameters:
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
        - description: pagination offset
          in: query
          name: offset
          schema:
            type: integer
            format: int64
        - description: pagination limit
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: amount greater than or equal to
          in: query
          name: amountGte
          schema:
            type: string
        - description: amount less than or equal to
          in: query
          name: amountLte
          schema:
            type: string
        - description: filter by reference
          in: query
          name: reference
          schema:
            type: string
        - description: filter by currency
          in: query
          name: currency
          schema:
            type: string
        - description: filter by status
          in: query
          name: status
          schema:
            type: string
        - description: filter by payment methods
          in: query
          name: paymentMethods
          schema:
            type: array
            items:
              type: string
        - description: search query
          in: query
          name: q
          schema:
            type: string
        - description: filter by customer account id
          in: query
          name: customerAccountId
          schema:
            type: string
        - description: created after (inclusive)
          in: query
          name: createdAtGte
          schema:
            type: string
        - description: created before (inclusive)
          in: query
          name: createdAtLte
          schema:
            type: string
        - description: filter by address name
          in: query
          name: addressName
          schema:
            type: string
        - description: filter by address phone number
          in: query
          name: addressPhoneNumber
          schema:
            type: string
        - description: filter by address company
          in: query
          name: addressCompany
          schema:
            type: string
        - description: filter by address line 1
          in: query
          name: addressLine1
          schema:
            type: string
        - description: filter by address line 2
          in: query
          name: addressLine2
          schema:
            type: string
        - description: filter by address city
          in: query
          name: addressCity
          schema:
            type: string
        - description: filter by address state
          in: query
          name: addressState
          schema:
            type: string
        - description: filter by address postcode
          in: query
          name: addressPostcode
          schema:
            type: string
        - description: filter by address country code
          in: query
          name: addressCountryCode
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrdersPage"
          description: List of orders matching the search criteria
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
        - apiKey: []
      summary: Search orders
      tags:
        - Orders
        - Public
  /api/2024-03-01/{merchantId}/orders/{id}:
    get:
      description: Retrieve a specific order by its ID
      operationId: getOrderById
      parameters:
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
        - description: order id
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
          description: Order details
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Order not found
      security:
        - apiKey: []
      summary: Get order by ID
      tags:
        - Orders
        - Public
  /api/2024-03-01/{merchantId}/payment-links:
    get:
      description: List payment links
      operationId: listPaymentLinks
      parameters:
        - description: pagination offset
          in: query
          name: offset
          schema:
            type: integer
            format: int64
        - description: pagination limit
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentLinkPage"
          description: List of payment links
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
        - apiKey: []
      summary: List payment links
      tags:
        - Payment Links
        - Public
    post:
      description: Creates a new payment link. User can choose whether to make it
        reusable
      operationId: createPaymentLink
      parameters:
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
        - description: Idempotency Key
          in: header
          name: Idempotency-Key
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentLinkCreateInput"
        description: The Payment Link to create
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentLink"
          description: The created payment link
        "400":
          description: Validation failed
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
        - apiKey: []
      summary: Create new payment link
      tags:
        - Payment Links
        - Public
  /api/2024-03-01/{merchantId}/payment-links/{paymentLinkId}:
    delete:
      description: Deactivate a payment link
      operationId: deactivatePaymentLink
      parameters:
        - description: payment link id
          in: path
          name: paymentLinkId
          required: true
          schema:
            type: string
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentLink"
          description: Payment link
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Payment link not found
      security:
        - apiKey: []
      summary: Deactivate a payment link
      tags:
        - Payment Links
        - Public
    get:
      description: Get a payment link by id
      operationId: getPaymentLink
      parameters:
        - description: payment link id
          in: path
          name: paymentLinkId
          required: true
          schema:
            type: string
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentLink"
          description: Payment link
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Payment link not found
      security:
        - apiKey: []
      summary: Get a payment link
      tags:
        - Payment Links
        - Public
  /api/2024-03-01/{merchantId}/payment-methods:
    get:
      description: Get all available payment methods for the merchant
      operationId: listPaymentMethods
      parameters:
        - description: The transaction currency
          in: query
          name: currency
          schema:
            type: string
        - description: The transaction amount
          in: query
          name: amount
          schema:
            type: string
        - description: Include inactive payment methods
          in: query
          name: includeInactive
          schema:
            type: boolean
        - description: pagination offset
          in: query
          name: offset
          schema:
            type: integer
            format: int64
        - description: pagination limit
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: The merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentMethodDetailsPage"
          description: The available payment methods
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
        - apiKey: []
      summary: Get payment methods
      tags:
        - Payment Methods
        - Public
  /api/2024-03-01/{merchantId}/payment-sessions/{paymentSessionId}/shipment-tracking:
    post:
      operationId: createShipmentTracking
      parameters:
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
        - description: payment session id
          in: path
          name: paymentSessionId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShipmentTrackingCreateInput"
        description: Input for adding new shipment tracking
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShipmentTracking"
          description: Shipment tracking entry created successfully
        "400":
          description: Validation failed
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
        - apiKey: []
      summary: Create a shipment tracking entry for a payment session
      tags:
        - Shipment Tracking
        - Public
  /api/2024-03-01/{merchantId}/payment-settings:
    post:
      description: Get available payment methods and their relevant settings.
      operationId: getPaymentSettings
      parameters:
        - description: pagination offset
          in: query
          name: offset
          schema:
            type: integer
            format: int64
        - description: pagination limit
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: merchant public key
          in: query
          name: mpk
          schema:
            type: string
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentSettingsContext"
        description: Context in which to fetch the settings
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentSettings"
          description: Payment methods and their settings
        "400":
          description: Validation failed
      summary: Get payment settings for a merchant
      tags:
        - Payment Settings
        - Public
  /api/2024-03-01/{merchantId}/statements/export:
    post:
      description: Export statements in different formats.
      operationId: exportStatement
      parameters:
        - description: merchant id
          in: path
          name: merchantId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StatementExportRequest"
        description: Statement export filters
        required: true
      responses:
        "200":
          content:
            application/octet-stream: {}
          description: The export statement
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
        - apiKey: []
      summary: Export a statement
      tags:
        - Statement Exports
        - Public
  /api/2024-03-01/{merchantId}/themes:
    get:
      description: List all themes
      operationId: listThemes
      parameters:
        - description: Merchant ID
          in: path
          name: merchantId
          required: true
          schema:
            type: string
        - description: Pagination offset
          in: query
          name: offset
          schema:
            type: integer
            format: int64
        - description: Pagination limit
          in: query
          name: limit
          schema:
            type: integer
            format: int32
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThemePage"
          description: List of themes
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
        - apiKey: []
      summary: List themes
      tags:
        - Themes
        - Public
    post:
      description: Creates a new theme
      operationId: createTheme
      parameters:
        - description: Merchant ID
          in: path
          name: merchantId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ThemeCreateInput"
        description: The theme to create
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Theme"
          description: The created theme
        "400":
          description: Validation failed
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
        - apiKey: []
      summary: Create a new theme
      tags:
        - Themes
        - Public
  /api/2024-03-01/{merchantId}/themes/{themeId}:
    get:
      description: Get a theme by ID
      operationId: getTheme
      parameters:
        - description: Merchant ID
          in: path
          name: merchantId
          required: true
          schema:
            type: string
        - description: Theme ID
          in: path
          name: themeId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Theme"
          description: The theme
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Theme not found
      security:
        - apiKey: []
      summary: Get a theme
      tags:
        - Themes
        - Public
    patch:
      description: Update a theme
      operationId: updateTheme
      parameters:
        - description: merchant ID
          in: path
          name: merchantId
          required: true
          schema:
            type: string
        - description: theme ID
          in: path
          name: themeId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ThemeUpdateInput"
        description: The updated theme
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Theme"
          description: The updated theme
        "400":
          description: Validation failed
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Theme not found
      security:
        - apiKey: []
      summary: Update a theme
      tags:
        - Themes
        - Public
  /api/2024-03-01/{merchantId}/webhooks:
    get:
      description: Get all webhooks
      operationId: listWebhooks
      parameters:
        - description: Merchant ID
          in: path
          name: merchantId
          required: true
          schema:
            type: string
        - description: pagination offset
          in: query
          name: offset
          schema:
            type: integer
            format: int64
        - description: pagination limit
          in: query
          name: limit
          schema:
            type: integer
            format: int32
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookPage"
          description: The webhooks
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
        - apiKey: []
      summary: Get all webhooks
      tags:
        - Webhooks
        - Public
    post:
      description: Create a new webhook
      operationId: createWebhook
      parameters:
        - description: Merchant ID
          in: path
          name: merchantId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookCreateInput"
        description: The webhook to create
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Webhook"
          description: The created webhook
        "400":
          description: Validation failed
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
        - apiKey: []
      summary: Create a new webhook
      tags:
        - Webhooks
        - Public
  /api/2024-03-01/{merchantId}/webhooks/{webhookId}:
    get:
      description: Get a webhook by id
      operationId: getWebhook
      parameters:
        - description: Merchant ID
          in: path
          name: merchantId
          required: true
          schema:
            type: string
        - description: Webhook ID
          in: path
          name: webhookId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Webhook"
          description: The webhook
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Webhook not found
      security:
        - apiKey: []
      summary: Get a webhook by id
      tags:
        - Webhooks
        - Public
    patch:
      description: Update a webhook
      operationId: updateWebhook
      parameters:
        - description: Merchant ID
          in: path
          name: merchantId
          required: true
          schema:
            type: string
        - description: Webhook ID
          in: path
          name: webhookId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookUpdateInput"
        description: The webhook to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Webhook"
          description: The updated webhook
        "400":
          description: Validation failed
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
        - apiKey: []
      summary: Update a webhook
      tags:
        - Webhooks
        - Public
components:
  schemas:
    AccountStatement:
      type: object
      description: The account statement.
      properties:
        checkoutIds:
          type: array
          description: A list of successful checkouts that have been made for the
            statement.
          items:
            type: string
            description: A list of successful checkouts that have been made for the
              statement.
          uniqueItems: true
        connection:
          $ref: "#/components/schemas/AccountStatementConnection"
        creditNotes:
          type: array
          description: The credit notes of the account statement.
          items:
            $ref: "#/components/schemas/AccountStatementCreditNote"
        id:
          type: string
          description: The unique ID of the account statement.
        invoices:
          type: array
          description: The invoices of the account statement.
          items:
            $ref: "#/components/schemas/AccountStatementInvoice"
        merchantId:
          type: string
          description: The ID of the merchant that owns this account statement.
        pendingCheckoutIds:
          type: array
          description: A list of checkouts that have in progress pending payments
            for the statement.
          items:
            type: string
            description: A list of checkouts that have in progress pending payments
              for the statement.
          uniqueItems: true
        reference:
          type: string
          description: The reference of the account statement.
          example: January 2024
        status:
          $ref: "#/components/schemas/AccountStatementStatus"
        url:
          type: string
          description: The URL to the account statement page.
      required:
        - checkoutIds
        - creditNotes
        - id
        - invoices
        - merchantId
        - pendingCheckoutIds
        - status
        - url
    AccountStatementConnection:
      type: object
      description: Data for the account statement connection.
      discriminator:
        mapping:
          MAGENTO_PROXY: "#/components/schemas/AccountStatementMagentoProxyConnection"
        propertyName: type
      properties:
        type:
          $ref: "#/components/schemas/AccountStatementConnectionType"
      required:
        - type
    AccountStatementConnectionInput:
      type: object
      description: The input to define which connection should be used for this statement
        with associated data.
      discriminator:
        mapping:
          MAGENTO_PROXY: "#/components/schemas/AccountStatementMagentoProxyConnectionInput"
        propertyName: type
      properties:
        type:
          $ref: "#/components/schemas/AccountStatementConnectionType"
      required:
        - type
    AccountStatementConnectionType:
      type: string
      description: The connection type for this account statement.
      enum:
        - MAGENTO_PROXY
    AccountStatementCreateInput:
      type: object
      description: The input to create a new account statement.
      properties:
        connection:
          $ref: "#/components/schemas/AccountStatementConnectionInput"
        creditNotes:
          type: array
          description: The credit notes of the account statement.
          items:
            $ref: "#/components/schemas/AccountStatementCreditNoteCreateInput"
        invoices:
          type: array
          description: The invoices of the account statement.
          items:
            $ref: "#/components/schemas/AccountStatementInvoiceCreateInput"
        reference:
          type: string
          description: The reference of the account statement.
          example: January 2024
    AccountStatementCreditNote:
      type: object
      description: An account statement credit note.
      properties:
        amountRemaining:
          $ref: "#/components/schemas/Money"
        creditNoteDate:
          type: string
          format: date-time
          description: The created date of the credit note.
        dueDate:
          type: string
          format: date-time
          description: The due date of the credit note.
        id:
          type: string
          description: The unique ID of the credit note.
        merchantId:
          type: string
          description: The ID of the merchant that owns the credit note.
        metadata:
          type: object
          additionalProperties:
            type: string
            description: Key value pairs to store additional information about the
              credit note.
          description: Key value pairs to store additional information about the credit
            note.
        reference:
          type: string
          description: The reference of the invoice.
          example: CR-12345
        taxAmount:
          $ref: "#/components/schemas/Money"
        total:
          $ref: "#/components/schemas/Money"
      required:
        - amountRemaining
        - creditNoteDate
        - dueDate
        - id
        - merchantId
        - metadata
        - reference
        - taxAmount
        - total
    AccountStatementCreditNoteCreateInput:
      type: object
      description: The input to create a new account statement credit note.
      properties:
        amountRemaining:
          $ref: "#/components/schemas/MoneyInput"
        creditNoteDate:
          type: string
          format: date-time
          description: The created date of the credit note.
        dueDate:
          type: string
          format: date-time
          description: The due date of the credit note.
        metadata:
          type: object
          additionalProperties:
            type: string
            description: Key value pairs to store additional information about the
              credit note.
          description: Key value pairs to store additional information about the credit
            note.
        reference:
          type: string
          description: The reference of the credit note.
          example: CR-12345
        taxAmount:
          $ref: "#/components/schemas/MoneyInput"
        total:
          $ref: "#/components/schemas/MoneyInput"
      required:
        - amountRemaining
        - creditNoteDate
        - dueDate
        - reference
        - taxAmount
        - total
    AccountStatementInvoice:
      type: object
      description: An account statement invoice.
      properties:
        amountPaid:
          $ref: "#/components/schemas/Money"
        amountPending:
          $ref: "#/components/schemas/Money"
        amountRemaining:
          $ref: "#/components/schemas/Money"
        checkoutIds:
          type: array
          description: A list of successful checkouts that have been made for the
            invoice.
          items:
            type: string
            description: A list of successful checkouts that have been made for the
              invoice.
          uniqueItems: true
        dueDate:
          type: string
          format: date-time
          description: The due date of the invoice.
        id:
          type: string
          description: The unique ID of the invoice.
        invoiceDate:
          type: string
          format: date-time
          description: The created date of the invoice.
        merchantId:
          type: string
          description: The ID of the merchant that owns the invoice.
        metadata:
          type: object
          additionalProperties:
            type: string
            description: Key value pairs to store additional information about the
              invoice.
          description: Key value pairs to store additional information about the invoice.
        paidDate:
          type: string
          format: date-time
          description: The date the invoice was fully paid.
        pendingCheckoutIds:
          type: array
          description: A list of checkouts that have in progress pending payments
            for the invoice.
          items:
            type: string
            description: A list of checkouts that have in progress pending payments
              for the invoice.
          uniqueItems: true
        reference:
          type: string
          description: The reference of the invoice.
          example: INV-12345
        status:
          $ref: "#/components/schemas/AccountStatementInvoiceStatus"
        taxAmount:
          $ref: "#/components/schemas/Money"
        total:
          $ref: "#/components/schemas/Money"
      required:
        - amountPaid
        - amountPending
        - amountRemaining
        - checkoutIds
        - dueDate
        - id
        - invoiceDate
        - merchantId
        - metadata
        - pendingCheckoutIds
        - reference
        - status
        - taxAmount
        - total
    AccountStatementInvoiceCreateInput:
      type: object
      description: The input to create a new account statement invoice.
      properties:
        amountPaid:
          $ref: "#/components/schemas/MoneyInput"
        amountRemaining:
          $ref: "#/components/schemas/MoneyInput"
        dueDate:
          type: string
          format: date-time
          description: The due date of the invoice.
        invoiceDate:
          type: string
          format: date-time
          description: The created date of the invoice.
        metadata:
          type: object
          additionalProperties:
            type: string
            description: Key value pairs to store additional information about the
              invoice.
          description: Key value pairs to store additional information about the invoice.
        paidDate:
          type: string
          format: date-time
          description: The date the invoice was fully paid.
        reference:
          type: string
          description: The reference of the invoice.
          example: INV-12345
        taxAmount:
          $ref: "#/components/schemas/MoneyInput"
        total:
          $ref: "#/components/schemas/MoneyInput"
      required:
        - amountPaid
        - amountRemaining
        - dueDate
        - invoiceDate
        - reference
        - taxAmount
        - total
    AccountStatementInvoiceStatus:
      type: string
      description: The status for this invoice.
      enum:
        - UNPAID
        - PARTIALLY_PAID
        - PAID
        - OVERPAID
    AccountStatementMagentoProxyConnection:
      type: object
      allOf:
        - $ref: "#/components/schemas/AccountStatementConnection"
        - type: object
          properties:
            accountId:
              type: string
              description: The magento proxy account ID.
            companyId:
              type: string
              description: The magento proxy company ID.
      description: Data for the magento proxy connection.
      required:
        - accountId
        - companyId
        - type
    AccountStatementMagentoProxyConnectionInput:
      type: object
      allOf:
        - $ref: "#/components/schemas/AccountStatementConnectionInput"
        - type: object
          properties:
            accountId:
              type: string
              description: The magento proxy account ID.
            companyId:
              type: string
              description: The magento proxy company ID.
            invoiceId:
              type: string
              description: The magento proxy invoice ID.
      description: Data for the magento proxy connection.
      required:
        - accountId
        - companyId
        - invoiceId
        - type
    AccountStatementStatus:
      type: string
      description: "The status of the account statement. Derived from the invoice\
        \ data. If all invoices are paid, the account statement is considered paid."
      enum:
        - UNPAID
        - PARTIALLY_PAID
        - PAID
    Address:
      type: object
      properties:
        city:
          type: string
          description: City.
        company:
          type: string
          description: Company name.
        countryCode:
          type: string
          description: Two letter ISO 3166-1 alpha-2 country code.
        line1:
          type: string
          description: Address line 1.
        line2:
          type: string
          description: Address line 2.
        name:
          type: string
          description: Name.
        phoneNumber:
          type: string
          description: Phone number.
        postcode:
          type: string
          description: Postcode.
        state:
          type: string
          description: State.
      required:
        - city
        - countryCode
        - line1
        - name
        - postcode
    AddressInput:
      type: object
      description: The address details.
      properties:
        city:
          type: string
          description: City.
          example: London
          maxLength: 128
          minLength: 1
        company:
          type: string
          description: Company name.
          example: null
          maxLength: 128
          minLength: 1
        countryCode:
          type: string
          description: Two letter ISO 3166-1 alpha-2 country code.
          example: GB
        line1:
          type: string
          description: Address line 1.
          example: 10 Downing Street
          maxLength: 128
          minLength: 1
        line2:
          type: string
          description: Address line 2.
          example: Westminster
          maxLength: 128
          minLength: 1
        name:
          type: string
          description: Name.
          example: John Doe
          maxLength: 255
          minLength: 1
        phoneNumber:
          type: string
          description: Phone number.
          example: null
          maxLength: 32
          minLength: 1
        postcode:
          type: string
          description: Postcode.
          example: SW1A 2AA
          maxLength: 128
          minLength: 1
        state:
          type: string
          description: State.
          example: Greater London
          maxLength: 128
          minLength: 1
      required:
        - city
        - countryCode
        - line1
        - name
        - postcode
    ApplicationSource:
      type: string
      description: The source of the application.
      enum:
        - API
        - XERO
        - MOTO
        - DASHBOARD_MOTO
        - DASHBOARD_PAYMENT_LINK
        - HOSTED_INVOICE
        - MAGENTO_CHECKOUT
        - MAGENTO_MOTO
        - MAGENTO_PAYMENT_LINK
        - MAGENTO_AX_INVOICE
        - WOOCOMMERCE_CHECKOUT
        - PAY_NOW_IN_PERSON
        - PAY_NOW_MOTO
        - PAY_NOW_PAYMENT_LINK
    CardPaymentMethodSettings:
      type: object
      description: Card payment method settings object
      properties:
        initializationToken:
          type: string
          description: Card field initialization token
        liveStatus:
          type: integer
          format: int32
          description: Card live status
      required:
        - liveStatus
    ChaserPlan:
      type: object
      description: Chaser Plan object
      properties:
        id:
          type: string
          description: The unique ID of the chaser plan.
        name:
          type: string
          description: The name of the chaser plan.
        schedules:
          type: array
          description: The schedules of the chaser plan.
          items:
            $ref: "#/components/schemas/ChaserPlanSchedule"
      required:
        - id
        - name
        - schedules
    ChaserPlanCreateInput:
      type: object
      description: The input to create a new chaser plan.
      properties:
        name:
          type: string
          description: The name for the chaser plan.
          maxLength: 255
          minLength: 1
        schedules:
          type: array
          description: The schedules for the chaser plan.
          items:
            $ref: "#/components/schemas/ChaserPlanScheduleCreateInput"
      required:
        - name
        - schedules
    ChaserPlanPage:
      type: object
      description: A page of chaser plans
      properties:
        pageable:
          $ref: "#/components/schemas/Pageable"
        results:
          type: array
          items:
            $ref: "#/components/schemas/ChaserPlan"
        total:
          type: integer
          format: int32
      required:
        - pageable
        - results
        - total
    ChaserPlanSchedule:
      type: object
      description: Chaser Plan Schedule object
      properties:
        id:
          type: string
          description: The unique ID of the schedule.
        notificationChannel:
          type: string
          description: The notification channel type for the schedule.
          enum:
            - EMAIL
            - SMS
        offsetTimeInSeconds:
          type: integer
          format: int64
          description: The offset from due date that the schedule will trigger at.
      required:
        - id
        - notificationChannel
        - offsetTimeInSeconds
    ChaserPlanScheduleCreateInput:
      type: object
      description: The input to create a new schedule for a chaser plan.
      properties:
        notificationChannel:
          type: string
          description: The notification channel type for the schedule.
          enum:
            - EMAIL
            - SMS
        offsetTimeInSeconds:
          type: integer
          format: int64
          description: The offset from due date that the schedule will trigger at.
      required:
        - notificationChannel
        - offsetTimeInSeconds
    Checkout:
      type: object
      description: Checkout object
      properties:
        amount:
          $ref: "#/components/schemas/Money"
        billingAddress:
          $ref: "#/components/schemas/Address"
        cancelUrl:
          type: string
          description: The URL to redirect the customer to if the checkout does not
            complete successfully.
        checkoutTemplateId:
          type: string
          description: The ID of the checkout template to use for this checkout.
        createdAt:
          type: string
          format: date-time
          description: The datetime when the checkout was created.
        customer:
          $ref: "#/components/schemas/Customer"
        expiresAt:
          type: string
          format: date-time
          description: The datetime when the checkout will expire.
        id:
          type: string
          description: The unique ID of the checkout.
        items:
          type: array
          items:
            $ref: "#/components/schemas/Item"
        merchantId:
          type: string
          description: The ID of the merchant that owns this checkout.
        metadata:
          type: object
          additionalProperties:
            type: string
            description: Key value pairs to store additional information about the
              checkout.
          description: Key value pairs to store additional information about the checkout.
        mode:
          $ref: "#/components/schemas/CheckoutMode"
        modeId:
          type: string
          description: Id related to this checkout mode. The associated AccountStatement's
            id for the ACCOUNT_STATEMENT mode.The associated PaymentLink's id for
            the PAYMENT_LINK mode.The checkout's id for the CHECKOUT and VIRTUAL_TERMINAL
            mode.
        originUrl:
          type: string
          description: The URL that the customer was on when the checkout was created.
        paymentLinkId:
          type: string
          deprecated: true
          description: The ID of the payment link that was used to create this checkout.This
            field is deprecated and will be removed in a future version.Use the modeId
            field instead.
        paymentSessionIds:
          type: array
          description: The IDs of the payment sessions that were created for this
            checkout.
          items:
            type: string
            description: The IDs of the payment sessions that were created for this
              checkout.
        pendingUrl:
          type: string
          description: The URL to redirect the customer to if the checkout falls into
            a pending payment flow.
        reference:
          type: string
          description: Your reference to identify the checkout and the subsequently
            created payment sessions.
        source:
          $ref: "#/components/schemas/ApplicationSource"
        status:
          $ref: "#/components/schemas/CheckoutStatus"
        successUrl:
          type: string
          description: The URL to redirect the customer to after the checkout is completed
            successfully.
        token:
          type: string
          description: The checkout session token.
        updatedAt:
          type: string
          format: date-time
          description: The datetime when the checkout was last updated.
        url:
          type: string
          description: The URL to the hosted checkout page.
      required:
        - checkoutTemplateId
        - createdAt
        - expiresAt
        - id
        - items
        - merchantId
        - metadata
        - mode
        - modeId
        - paymentSessionIds
        - source
        - status
        - token
        - updatedAt
        - url
    CheckoutAmountType:
      type: string
      description: "The amount type for the checkout. This can be either a fixed amount\
        \ or an editable amount. If the amount is editable, the user can enter the\
        \ amount they want to pay inside the hosted checkout. If the amount is fixed,\
        \ the amount set in the checkout is the amount that will be paid and cannot\
        \ be changed inside the hosted checkout."
      enum:
        - FIXED
        - EDITABLE
    CheckoutApplePaySettings:
      type: object
      description: The Apple Pay settings to be used for the checkout.
      properties:
        captureType:
          $ref: "#/components/schemas/PaymentCaptureType"
        customerFields:
          $ref: "#/components/schemas/CheckoutCustomerFields"
        limits:
          $ref: "#/components/schemas/CheckoutPaymentMethodLimit"
    CheckoutApplePaySettingsInput:
      type: object
      description: The Apple Pay settings to be used for the checkout.
      properties:
        captureType:
          $ref: "#/components/schemas/PaymentCaptureType"
        customerFields:
          $ref: "#/components/schemas/CheckoutCustomerFieldsInput"
        limits:
          $ref: "#/components/schemas/CheckoutPaymentMethodLimitInput"
    CheckoutApplePaySettingsUpdateInput:
      type: object
      description: The Apple Pay settings to be used for the checkout.
      properties:
        captureType:
          $ref: "#/components/schemas/PaymentCaptureType"
        customerFields:
          $ref: "#/components/schemas/CheckoutCustomerFieldsUpdateInput"
        limits:
          $ref: "#/components/schemas/CheckoutPaymentMethodLimitUpdateInput"
    CheckoutCardSettings:
      type: object
      description: The Card settings to be used for the checkout.
      properties:
        captureType:
          $ref: "#/components/schemas/PaymentCaptureType"
        customerFields:
          $ref: "#/components/schemas/CheckoutCustomerFields"
        limits:
          $ref: "#/components/schemas/CheckoutPaymentMethodLimit"
    CheckoutCardSettingsInput:
      type: object
      description: The Card settings to be used for the checkout.
      properties:
        captureType:
          $ref: "#/components/schemas/PaymentCaptureType"
        customerFields:
          $ref: "#/components/schemas/CheckoutCustomerFieldsInput"
        limits:
          $ref: "#/components/schemas/CheckoutPaymentMethodLimitInput"
    CheckoutCardSettingsUpdateInput:
      type: object
      description: The Card settings to be used for the checkout.
      properties:
        captureType:
          $ref: "#/components/schemas/PaymentCaptureType"
        customerFields:
          $ref: "#/components/schemas/CheckoutCustomerFieldsUpdateInput"
        limits:
          $ref: "#/components/schemas/CheckoutPaymentMethodLimitUpdateInput"
    CheckoutClearpaySettings:
      type: object
      description: The Clearpay settings to be used for the checkout.
      properties:
        customerFields:
          $ref: "#/components/schemas/CheckoutCustomerFields"
        limits:
          $ref: "#/components/schemas/CheckoutPaymentMethodLimit"
    CheckoutClearpaySettingsInput:
      type: object
      description: The Clearpay settings to be used for the checkout.
      properties:
        customerFields:
          $ref: "#/components/schemas/CheckoutCustomerFieldsInput"
        limits:
          $ref: "#/components/schemas/CheckoutPaymentMethodLimitInput"
    CheckoutClearpaySettingsUpdateInput:
      type: object
      description: The Clearpay settings to be used for the checkout.
      properties:
        customerFields:
          $ref: "#/components/schemas/CheckoutCustomerFieldsUpdateInput"
        limits:
          $ref: "#/components/schemas/CheckoutPaymentMethodLimitUpdateInput"
    CheckoutCreateInput:
      type: object
      description: The input to create a new checkout.
      properties:
        amount:
          $ref: "#/components/schemas/MoneyInput"
        billingAddress:
          $ref: "#/components/schemas/AddressInput"
        cancelUrl:
          type: string
          description: |-
            The URL to redirect the user to if the checkout does not complete successfully.
                                     This field supports the template variable `{{CHECKOUT_ID}}` which will be replaced with the
                                     created checkouts ID.
          example: "https://example.com/success?checkout_id={{CHECKOUT_ID}}"
        checkoutTemplateId:
          type: string
          description: |-
            The ID of the checkout template to use for this checkout.
                                     If not provided, the default template will be used.
                                     If provided, the template must be available to the merchant.
          example: null
        customer:
          $ref: "#/components/schemas/CustomerInput"
        items:
          type: array
          items:
            $ref: "#/components/schemas/ItemInput"
        metadata:
          type: object
          additionalProperties:
            type: string
            description: Key value pairs to store additional information about the
              checkout.
            example: "{\"key1\":\"value1\",\"key2\":\"value2\"}"
          description: Key value pairs to store additional information about the checkout.
          example:
            key1: value1
            key2: value2
        mode:
          $ref: "#/components/schemas/CheckoutMode"
        modeId:
          type: string
          description: ID related to this checkout mode. Required for the ACCOUNT_STATEMENT
            mode and should be set to the AccountStatement's ID.Automatically set
            for all other modes.
        originUrl:
          type: string
          description: The URL that the customer was on when the checkout was created.
        pendingUrl:
          type: string
          description: |-
            The URL to redirect the user to if the checkout falls into a pending payment flow.
                                     This field supports the template variable `{{CHECKOUT_ID}}` which will be replaced with the
                                     created checkouts ID.
          example: "https://example.com/success?checkout_id={{CHECKOUT_ID}}"
        reference:
          type: string
          description: Your reference to identify the checkout and the subsequently
            created payment sessions.
          example: "Order #12345"
          maxLength: 255
          minLength: 1
        source:
          $ref: "#/components/schemas/ApplicationSource"
        successUrl:
          type: string
          description: |-
            The URL to redirect the user to after the checkout is completed successfully.
                                     This field supports the template variable `{{CHECKOUT_ID}}` which will be replaced with the
                                     created checkouts ID.
          example: "https://example.com/success?checkout_id={{CHECKOUT_ID}}"
    CheckoutCustomerFieldType:
      type: string
      description: The customer field type.
      enum:
        - GIVEN_NAME
        - SURNAME
        - EMAIL
        - PHONE_NUMBER
        - BILLING_ADDRESS
    CheckoutCustomerFields:
      type: object
      properties:
        optional:
          type: array
          description: The optional customer fields for the checkout.
          items:
            $ref: "#/components/schemas/CheckoutCustomerFieldType"
          uniqueItems: true
        required:
          type: array
          description: The required customer fields for the checkout.
          items:
            $ref: "#/components/schemas/CheckoutCustomerFieldType"
          uniqueItems: true
    CheckoutCustomerFieldsInput:
      type: object
      description: |-
        The customer fields that are required or optional for the checkout.
                             If a field is not required or optional, it will not be shown in the hosted checkout page.
      properties:
        optional:
          type: array
          description: The optional customer fields for the checkout.
          items:
            $ref: "#/components/schemas/CheckoutCustomerFieldType"
          uniqueItems: true
        required:
          type: array
          description: The required customer fields for the checkout.
          items:
            $ref: "#/components/schemas/CheckoutCustomerFieldType"
          uniqueItems: true
    CheckoutCustomerFieldsUpdateInput:
      type: object
      description: |-
        The customer fields that are required or optional for the checkout.
                             If a field is not required or optional, it will not be shown in the hosted checkout page.
      properties:
        optional:
          type: array
          description: The optional customer fields for the checkout.
          items:
            $ref: "#/components/schemas/CheckoutCustomerFieldType"
          uniqueItems: true
        required:
          type: array
          description: The required customer fields for the checkout.
          items:
            $ref: "#/components/schemas/CheckoutCustomerFieldType"
          uniqueItems: true
    CheckoutGooglePaySettings:
      type: object
      description: The Google Pay settings to be used for the checkout.
      properties:
        captureType:
          $ref: "#/components/schemas/PaymentCaptureType"
        customerFields:
          $ref: "#/components/schemas/CheckoutCustomerFields"
        limits:
          $ref: "#/components/schemas/CheckoutPaymentMethodLimit"
    CheckoutGooglePaySettingsInput:
      type: object
      description: The Google Pay settings to be used for the checkout.
      properties:
        captureType:
          $ref: "#/components/schemas/PaymentCaptureType"
        customerFields:
          $ref: "#/components/schemas/CheckoutCustomerFieldsInput"
        limits:
          $ref: "#/components/schemas/CheckoutPaymentMethodLimitInput"
    CheckoutGooglePaySettingsUpdateInput:
      type: object
      description: The Google Pay settings to be used for the checkout.
      properties:
        captureType:
          $ref: "#/components/schemas/PaymentCaptureType"
        customerFields:
          $ref: "#/components/schemas/CheckoutCustomerFieldsUpdateInput"
        limits:
          $ref: "#/components/schemas/CheckoutPaymentMethodLimitUpdateInput"
    CheckoutKlarnaSettings:
      type: object
      description: The Klarna settings to be used for the checkout.
      properties:
        customerFields:
          $ref: "#/components/schemas/CheckoutCustomerFields"
        limits:
          $ref: "#/components/schemas/CheckoutPaymentMethodLimit"
    CheckoutKlarnaSettingsInput:
      type: object
      description: The Klarna settings to be used for the checkout.
      properties:
        customerFields:
          $ref: "#/components/schemas/CheckoutCustomerFieldsInput"
        limits:
          $ref: "#/components/schemas/CheckoutPaymentMethodLimitInput"
    CheckoutKlarnaSettingsUpdateInput:
      type: object
      description: The Klarna settings to be used for the checkout.
      properties:
        customerFields:
          $ref: "#/components/schemas/CheckoutCustomerFieldsUpdateInput"
        limits:
          $ref: "#/components/schemas/CheckoutPaymentMethodLimitUpdateInput"
    CheckoutMode:
      type: string
      description: The mode of the checkout.
      enum:
        - CHECKOUT
        - PAYMENT_LINK
        - ACCOUNT_STATEMENT
        - VIRTUAL_TERMINAL
        - INVOICE
    CheckoutPage:
      type: object
      description: A page of checkouts
      properties:
        pageable:
          $ref: "#/components/schemas/Pageable"
        results:
          type: array
          items:
            $ref: "#/components/schemas/Checkout"
        total:
          type: integer
          format: int32
      required:
        - pageable
        - results
        - total
    CheckoutPayByBankSettings:
      type: object
      description: The Pay by Bank settings to be used for the checkout.
      properties:
        captureType:
          $ref: "#/components/schemas/PaymentCaptureType"
        customerFields:
          $ref: "#/components/schemas/CheckoutCustomerFields"
        limits:
          $ref: "#/components/schemas/CheckoutPaymentMethodLimit"
    CheckoutPayByBankSettingsInput:
      type: object
      description: The Pay by Bank settings to be used for the checkout.
      properties:
        captureType:
          $ref: "#/components/schemas/PaymentCaptureType"
        customerFields:
          $ref: "#/components/schemas/CheckoutCustomerFieldsInput"
        limits:
          $ref: "#/components/schemas/CheckoutPaymentMethodLimitInput"
    CheckoutPayByBankSettingsUpdateInput:
      type: object
      description: The Pay by Bank settings to be used for the checkout.
      properties:
        captureType:
          $ref: "#/components/schemas/PaymentCaptureType"
        customerFields:
          $ref: "#/components/schemas/CheckoutCustomerFieldsUpdateInput"
        limits:
          $ref: "#/components/schemas/CheckoutPaymentMethodLimitUpdateInput"
    CheckoutPaymentMethodLimit:
      type: object
      description: The payment method limits to be used for the checkout.
      properties:
        total:
          type: array
          items:
            $ref: "#/components/schemas/CheckoutPaymentMethodTotalLimit"
      required:
        - total
    CheckoutPaymentMethodLimitInput:
      type: object
      description: The payment method limits to be used for the checkout.
      properties:
        total:
          type: array
          items:
            $ref: "#/components/schemas/CheckoutPaymentMethodTotalLimit"
      required:
        - total
    CheckoutPaymentMethodLimitUpdateInput:
      type: object
      description: The payment method limits to be used for the checkout.
      properties:
        total:
          type: array
          items:
            $ref: "#/components/schemas/CheckoutPaymentMethodTotalLimit"
    CheckoutPaymentMethodSettings:
      type: object
      description: The payment method settings to be used for the checkout.
      properties:
        applePay:
          $ref: "#/components/schemas/CheckoutApplePaySettings"
        card:
          $ref: "#/components/schemas/CheckoutCardSettings"
        clearpay:
          $ref: "#/components/schemas/CheckoutClearpaySettings"
        googlePay:
          $ref: "#/components/schemas/CheckoutGooglePaySettings"
        klarna:
          $ref: "#/components/schemas/CheckoutKlarnaSettings"
        payByBank:
          $ref: "#/components/schemas/CheckoutPayByBankSettings"
        zopaRetailFinance:
          $ref: "#/components/schemas/CheckoutZopaRetailFinanceSettings"
    CheckoutPaymentMethodSettingsInput:
      type: object
      description: The payment method settings to be used for the checkout.
      properties:
        applePay:
          $ref: "#/components/schemas/CheckoutApplePaySettingsInput"
        card:
          $ref: "#/components/schemas/CheckoutCardSettingsInput"
        clearpay:
          $ref: "#/components/schemas/CheckoutClearpaySettingsInput"
        googlePay:
          $ref: "#/components/schemas/CheckoutGooglePaySettingsInput"
        klarna:
          $ref: "#/components/schemas/CheckoutKlarnaSettingsInput"
        payByBank:
          $ref: "#/components/schemas/CheckoutPayByBankSettingsInput"
        zopaRetailFinance:
          $ref: "#/components/schemas/CheckoutZopaRetailFinanceSettingsInput"
    CheckoutPaymentMethodSettingsUpdateInput:
      type: object
      description: The payment method settings to be used for the checkout.
      properties:
        applePay:
          $ref: "#/components/schemas/CheckoutApplePaySettingsUpdateInput"
        card:
          $ref: "#/components/schemas/CheckoutCardSettingsUpdateInput"
        clearpay:
          $ref: "#/components/schemas/CheckoutClearpaySettingsUpdateInput"
        googlePay:
          $ref: "#/components/schemas/CheckoutGooglePaySettingsUpdateInput"
        klarna:
          $ref: "#/components/schemas/CheckoutKlarnaSettingsUpdateInput"
        payByBank:
          $ref: "#/components/schemas/CheckoutPayByBankSettingsUpdateInput"
        zopaRetailFinance:
          $ref: "#/components/schemas/CheckoutZopaRetailFinanceSettingsUpdateInput"
    CheckoutPaymentMethodTotalLimit:
      type: object
      description: The total amount limits for a specific currency to be used for
        the payment method.
      properties:
        currency:
          type: string
        max:
          type: string
        min:
          type: string
      required:
        - currency
        - max
        - min
    CheckoutReferenceType:
      type: string
      description: "The reference type for the checkout. This can be fixed or editable.\
        \ If editable, the user can modify the reference when they pay inside the\
        \ hosted checkout. "
      enum:
        - FIXED
        - EDITABLE
    CheckoutStatus:
      type: string
      description: The status of the checkout.
      enum:
        - ACTIVE
        - EXPIRED
        - COMPLETED
    CheckoutTemplate:
      type: object
      properties:
        amountType:
          $ref: "#/components/schemas/CheckoutAmountType"
        createdAt:
          type: string
          format: date-time
          description: The datetime when the checkout template was created.
        customerFields:
          $ref: "#/components/schemas/CheckoutCustomerFields"
        disabledPaymentMethods:
          type: array
          description: The set of payment methods that are disabled for the checkout.
          enum:
            - CARD
            - APPLE_PAY
            - GOOGLE_PAY
            - PAY_BY_BANK
          items:
            $ref: "#/components/schemas/PaymentMethod"
          uniqueItems: true
        enabledPaymentMethods:
          type: array
          description: Ordered list of payment methods that are enabled for the checkout.
            An empty list means all payment methods are enabled.
          items:
            $ref: "#/components/schemas/PaymentMethod"
        id:
          type: string
          description: The unique ID of the checkout template.
        merchantId:
          type: string
          description: The ID of the merchant that owns this checkout template.
        mode:
          $ref: "#/components/schemas/CheckoutMode"
        name:
          type: string
          description: The name of the checkout template.
        notifyCustomer:
          type: boolean
          description: Whether the customer should be notified on payment completion.
        notifyMerchant:
          type: boolean
          description: Whether you should be notified on payment completion.
        paymentMethodSettings:
          $ref: "#/components/schemas/CheckoutPaymentMethodSettings"
        referenceType:
          $ref: "#/components/schemas/CheckoutReferenceType"
        source:
          $ref: "#/components/schemas/ApplicationSource"
        updatedAt:
          type: string
          format: date-time
          description: The datetime when the checkout template was last updated.
      required:
        - amountType
        - createdAt
        - disabledPaymentMethods
        - enabledPaymentMethods
        - id
        - merchantId
        - mode
        - name
        - notifyCustomer
        - notifyMerchant
        - referenceType
        - source
        - updatedAt
    CheckoutTemplateCreateInput:
      type: object
      description: The input for creating a checkout template.
      example:
        amountType: FIXED
        customerFields:
          optional:
            - PHONE_NUMBER
          required:
            - GIVEN_NAME
            - SURNAME
            - EMAIL
        enabledPaymentMethods:
          - CARD
          - APPLE_PAY
          - PAY_BY_BANK
          - CLEARPAY
          - KLARNA
        name: My Checkout Template
        notifyCustomer: false
        notifyMerchant: false
        paymentMethodSettings: null
        referenceType: FIXED
        source: API
      properties:
        amountType:
          $ref: "#/components/schemas/CheckoutAmountType"
        customerFields:
          $ref: "#/components/schemas/CheckoutCustomerFieldsInput"
        disabledPaymentMethods:
          type: array
          description: The set of payment methods that are disabled for the checkout.
          enum:
            - CARD
            - APPLE_PAY
            - GOOGLE_PAY
            - PAY_BY_BANK
            - KLARNA
            - CLEARPAY
          items:
            $ref: "#/components/schemas/PaymentMethod"
          uniqueItems: true
        enabledPaymentMethods:
          type: array
          description: Ordered list of payment methods that are enabled for the checkout.
            An empty list (or null) means all payment methods are enabled.
          enum:
            - CARD
            - APPLE_PAY
            - GOOGLE_PAY
            - PAY_BY_BANK
            - KLARNA
            - CLEARPAY
          items:
            $ref: "#/components/schemas/PaymentMethod"
        mode:
          $ref: "#/components/schemas/CheckoutMode"
        name:
          type: string
          description: The name of the checkout template.
          maxLength: 255
          minLength: 1
        notifyCustomer:
          type: boolean
          default: false
          description: Whether the customer should be notified on payment completion.
        notifyMerchant:
          type: boolean
          default: false
          description: Whether you should be notified on payment completion.
        paymentMethodSettings:
          $ref: "#/components/schemas/CheckoutPaymentMethodSettingsInput"
        referenceType:
          $ref: "#/components/schemas/CheckoutReferenceType"
        source:
          $ref: "#/components/schemas/ApplicationSource"
      required:
        - name
    CheckoutTemplatePage:
      type: object
      description: A page of checkout templates
      properties:
        pageable:
          $ref: "#/components/schemas/Pageable"
        results:
          type: array
          items:
            $ref: "#/components/schemas/CheckoutTemplate"
        total:
          type: integer
          format: int32
      required:
        - pageable
        - results
        - total
    CheckoutTemplateUpdateInput:
      type: object
      description: The input for updating a checkout template.
      example:
        amountType: FIXED
        customerFields:
          optional:
            - PHONE_NUMBER
          required:
            - GIVEN_NAME
            - SURNAME
            - EMAIL
        enabledPaymentMethods:
          - CARD
          - PAY_BY_BANK
        name: My Checkout Template Updated
        notifyCustomer: false
        notifyMerchant: false
        paymentMethodSettings: null
        referenceType: FIXED
      properties:
        amountType:
          $ref: "#/components/schemas/CheckoutAmountType"
        customerFields:
          $ref: "#/components/schemas/CheckoutCustomerFieldsUpdateInput"
        disabledPaymentMethods:
          type: array
          description: The set of payment methods that are disabled for the checkout.
          enum:
            - CARD
            - APPLE_PAY
            - GOOGLE_PAY
            - PAY_BY_BANK
          items:
            $ref: "#/components/schemas/PaymentMethod"
          uniqueItems: true
        enabledPaymentMethods:
          type: array
          description: Ordered list of payment methods that are enabled for the checkout.
            An empty list means all payment methods are enabled.
          enum:
            - CARD
            - APPLE_PAY
            - GOOGLE_PAY
            - PAY_BY_BANK
            - CLEARPAY
            - KLARNA
          items:
            $ref: "#/components/schemas/PaymentMethod"
        name:
          type: string
          description: The name of the checkout template.
          maxLength: 255
          minLength: 1
        notifyCustomer:
          type: boolean
          default: false
          description: Whether the customer should be notified on payment completion.
        notifyMerchant:
          type: boolean
          default: false
          description: Whether you should be notified on payment completion.
        paymentMethodSettings:
          $ref: "#/components/schemas/CheckoutPaymentMethodSettingsUpdateInput"
        referenceType:
          $ref: "#/components/schemas/CheckoutReferenceType"
    CheckoutZopaRetailFinanceSettings:
      type: object
      description: The Zopa Retail Finance settings to be used for the checkout.
      properties:
        customerFields:
          $ref: "#/components/schemas/CheckoutCustomerFields"
        limits:
          $ref: "#/components/schemas/CheckoutPaymentMethodLimit"
    CheckoutZopaRetailFinanceSettingsInput:
      type: object
      description: The Zopa retail finance settings to be used for the checkout.
      properties:
        customerFields:
          $ref: "#/components/schemas/CheckoutCustomerFieldsInput"
        limits:
          $ref: "#/components/schemas/CheckoutPaymentMethodLimitInput"
    CheckoutZopaRetailFinanceSettingsUpdateInput:
      type: object
      description: The Zopa retail finance settings to be used for the checkout.
      properties:
        customerFields:
          $ref: "#/components/schemas/CheckoutCustomerFieldsUpdateInput"
        limits:
          $ref: "#/components/schemas/CheckoutPaymentMethodLimitUpdateInput"
    Connection:
      type: object
      description: The connection.
      properties:
        createdAt:
          type: string
          format: date-time
        data:
          $ref: "#/components/schemas/ConnectionData"
        id:
          type: string
        merchantId:
          type: string
        status:
          $ref: "#/components/schemas/ConnectionStatus"
        updatedAt:
          type: string
          format: date-time
      required:
        - createdAt
        - data
        - id
        - merchantId
        - status
        - updatedAt
    ConnectionCreateInput:
      type: object
      description: The input to create a new connection.
      properties:
        data:
          $ref: "#/components/schemas/ConnectionDataInput"
      required:
        - data
    ConnectionData:
      type: object
      description: The connection data for a given type
      discriminator:
        mapping:
          GOOGLE_PAY: "#/components/schemas/GooglePayConnectionData"
          KLARNA: "#/components/schemas/KlarnaConnectionData"
          MAGENTO: "#/components/schemas/MagentoConnectionData"
          MAGENTO_PROXY: "#/components/schemas/MagentoProxyConnectionData"
          WOOCOMMERCE: "#/components/schemas/WoocommerceConnectionData"
          ZOPA_RETAIL_FINANCE: "#/components/schemas/ZopaRetailFinanceConnectionData"
        propertyName: type
      properties:
        type:
          $ref: "#/components/schemas/ConnectionType"
      required:
        - type
    ConnectionDataInput:
      type: object
      description: The input to define the connection data for a given type
      discriminator:
        mapping:
          GOOGLE_PAY: "#/components/schemas/GooglePayConnectionDataInput"
          KLARNA: "#/components/schemas/KlarnaConnectionDataInput"
          MAGENTO: "#/components/schemas/MagentoConnectionDataInput"
          MAGENTO_PROXY: "#/components/schemas/MagentoProxyConnectionDataInput"
          WOOCOMMERCE: "#/components/schemas/WoocommerceConnectionDataInput"
          ZOPA_RETAIL_FINANCE: "#/components/schemas/ZopaRetailFinanceConnectionDataInput"
        propertyName: type
      properties:
        type:
          $ref: "#/components/schemas/ConnectionType"
      required:
        - type
    ConnectionOauthSignatureMethod:
      type: string
      description: The connections oauth signature method.
      enum:
        - HMAC_SHA256
        - HMAC_SHA1
    ConnectionPage:
      type: object
      description: A page of connections
      properties:
        pageable:
          $ref: "#/components/schemas/Pageable"
        results:
          type: array
          items:
            $ref: "#/components/schemas/Connection"
        total:
          type: integer
          format: int32
      required:
        - pageable
        - results
        - total
    ConnectionStatus:
      type: string
      description: The connection status.
      enum:
        - CONNECTED
        - DISCONNECTED
    ConnectionType:
      type: string
      description: The connection type.
      enum:
        - MAGENTO_PROXY
        - MAGENTO
        - GOOGLE_PAY
        - KLARNA
        - WOOCOMMERCE
        - ZOPA_RETAIL_FINANCE
    CreditNote:
      type: object
      description: Credit note object
      properties:
        appliedToInvoiceIds:
          type: array
          description: The invoices this credit note was applied to.
          items:
            type: string
            description: The invoices this credit note was applied to.
          uniqueItems: true
        creditNoteDate:
          type: string
          format: date-time
          description: The date and time for the credit note.
        creditNoteNumber:
          type: string
          description: The number of the credit note.
        id:
          type: string
          description: The unique ID of the credit note.
        invoiceId:
          type: string
          description: The ID of the invoice this credit note is for.
        items:
          type: array
          description: The items in the credit note.
          items:
            $ref: "#/components/schemas/CreditNoteItem"
        merchantId:
          type: string
          description: The ID of the merchant that owns this credit note.
        pendingRefundIds:
          type: array
          description: The pending refunds still processing for this credit note.
          items:
            type: string
            description: The pending refunds still processing for this credit note.
          uniqueItems: true
        reason:
          type: string
          description: The reason for creating a credit note
          enum:
            - FRAUD
            - DISCOUNT
            - DUPLICATE
            - RETURN
            - OTHER
        refundIds:
          type: array
          description: The refunds created for this credit note.
          items:
            type: string
            description: The refunds created for this credit note.
          uniqueItems: true
        status:
          $ref: "#/components/schemas/CreditNoteStatus"
        subtotal:
          $ref: "#/components/schemas/Money"
        taxAmount:
          $ref: "#/components/schemas/Money"
        total:
          $ref: "#/components/schemas/Money"
      required:
        - appliedToInvoiceIds
        - creditNoteDate
        - creditNoteNumber
        - id
        - invoiceId
        - items
        - merchantId
        - pendingRefundIds
        - reason
        - refundIds
        - status
        - subtotal
        - total
    CreditNoteCreateInput:
      type: object
      description: Input for creating a new credit note
      properties:
        creditNoteDate:
          type: string
          format: date-time
          description: The created date of the credit note.
        creditNoteNumber:
          type: string
          description: The number of the credit note.
          maxLength: 255
          minLength: 1
        invoiceId:
          type: string
          description: The ID of the invoice this credit note is for.
        items:
          type: array
          description: The items in the credit note.
          items:
            $ref: "#/components/schemas/CreditNoteItemCreateInput"
        reason:
          type: string
          description: The reason for creating a credit note
          enum:
            - FRAUD
            - DISCOUNT
            - DUPLICATE
            - RETURN
            - OTHER
        taxAmount:
          $ref: "#/components/schemas/MoneyInput"
        total:
          $ref: "#/components/schemas/MoneyInput"
      required:
        - creditNoteDate
        - creditNoteNumber
        - invoiceId
        - items
        - reason
        - total
    CreditNoteDownload:
      type: object
      description: Credit note download object
      properties:
        expiresAt:
          type: string
          format: date-time
          description: The date and time when the url expires
        url:
          type: string
          description: The url to download the credit note
      required:
        - expiresAt
        - url
    CreditNoteItem:
      type: object
      description: Credit note item object
      properties:
        id:
          type: string
          description: The unique ID of the credit note item.
        invoiceItemId:
          type: string
          description: The ID of the invoice item this credit note item is for.
        merchantId:
          type: string
          description: The ID of the merchant that owns this credit note item.
        name:
          type: string
          description: The name of the credit note item.
        subtotal:
          $ref: "#/components/schemas/Money"
        taxAmount:
          $ref: "#/components/schemas/Money"
        taxRate:
          type: string
          description: The tax rate of the credit note item.
        total:
          $ref: "#/components/schemas/Money"
      required:
        - id
        - merchantId
        - name
        - subtotal
        - total
    CreditNoteItemCreateInput:
      type: object
      description: Input for creating a new credit note item
      properties:
        invoiceItemId:
          type: string
          description: The ID of the invoice item this credit note item is for.
        merchantId:
          type: string
          description: The ID of the merchant that owns this credit note item.
        name:
          type: string
          description: The name of the credit note item.
        taxAmount:
          $ref: "#/components/schemas/MoneyInput"
        taxRate:
          type: string
          description: The tax rate of the credit note item.
        total:
          $ref: "#/components/schemas/MoneyInput"
      required:
        - merchantId
        - name
        - total
    CreditNotePage:
      type: object
      description: A page of credit notes
      properties:
        pageable:
          $ref: "#/components/schemas/Pageable"
        results:
          type: array
          items:
            $ref: "#/components/schemas/CreditNote"
        total:
          type: integer
          format: int32
      required:
        - pageable
        - results
        - total
    CreditNoteStatus:
      type: string
      description: The status of a credit note
      enum:
        - DRAFT
        - OPEN
        - APPLIED
        - VOIDED
    CreditNoteUpdateInput:
      type: object
      description: Input for creating a new credit note
      properties:
        creditNoteDate:
          type: string
          format: date-time
          description: The created date of the credit note.
        creditNoteNumber:
          type: string
          description: The number of the credit note.
          maxLength: 255
          minLength: 1
        items:
          type: array
          description: The items in the credit note.
          items:
            $ref: "#/components/schemas/CreditNoteItemCreateInput"
        reason:
          type: string
          description: The reason for creating a credit note
          enum:
            - FRAUD
            - DISCOUNT
            - DUPLICATE
            - RETURN
            - OTHER
        taxAmount:
          $ref: "#/components/schemas/MoneyInput"
        total:
          $ref: "#/components/schemas/MoneyInput"
      required:
        - creditNoteDate
        - creditNoteNumber
        - items
        - reason
        - total
    Customer:
      type: object
      properties:
        email:
          type: string
          description: The customer's email address.
        givenName:
          type: string
          description: The customer's given name.
        phoneNumber:
          type: string
          description: The customer's phone number.
        surname:
          type: string
          description: The customer's surname.
    CustomerAccount:
      type: object
      description: Customer account object
      properties:
        billingAddress:
          $ref: "#/components/schemas/CustomerAccountAddress"
        email:
          type: string
          description: Email of the customer.
        givenName:
          type: string
          description: Given name of the customer.
        id:
          type: string
          description: The unique ID of the customer.
        organizationName:
          type: string
          description: Customer's organisation name.
        phoneNumber:
          type: string
          description: Phone of the customer.
        reference:
          type: string
          description: Customer's reference.
        shippingAddress:
          $ref: "#/components/schemas/CustomerAccountAddress"
        surname:
          type: string
          description: Surname of the customer.
        vatNumber:
          type: string
          description: Customer's VAT number.
      required:
        - id
    CustomerAccountAddress:
      type: object
      description: Customer account address object
      properties:
        city:
          type: string
          description: City of the address
        company:
          type: string
          description: Customer's company name
        countryCode:
          type: string
          description: Two letter ISO 3166-1 alpha-2 country code.
        line1:
          type: string
          description: First line of the address
        line2:
          type: string
          description: Second line of the address
        name:
          type: string
          description: Customer's name
        phoneNumber:
          type: string
          description: Customer's phone number
        postcode:
          type: string
          description: Postal code of the address
        state:
          type: string
          description: State or province of the address
      required:
        - city
        - countryCode
        - line1
        - name
        - postcode
    CustomerAccountAddressCreateInput:
      type: object
      description: The input to create a customer account address.
      properties:
        city:
          type: string
          description: City of the address
        company:
          type: string
          description: Customer's company name
        countryCode:
          type: string
          description: Two letter ISO 3166-1 alpha-2 country code.
        line1:
          type: string
          description: First line of the address
        line2:
          type: string
          description: Second line of the address
        name:
          type: string
          description: Customer's name
        phoneNumber:
          type: string
          description: Customer's phone number
        postcode:
          type: string
          description: Postal code of the address
        state:
          type: string
          description: State or province of the address
      required:
        - city
        - countryCode
        - line1
        - name
        - postcode
    CustomerAccountCreateInput:
      type: object
      description: The input to create a new customer account.
      properties:
        billingAddress:
          $ref: "#/components/schemas/CustomerAccountAddressCreateInput"
        email:
          type: string
          description: Email of the customer.
        givenName:
          type: string
          description: Given name of the customer.
        organizationName:
          type: string
          description: Customer's organisation name.
        phoneNumber:
          type: string
          description: Phone of the customer.
        reference:
          type: string
          description: Customer's reference.
        shippingAddress:
          $ref: "#/components/schemas/CustomerAccountAddressCreateInput"
        surname:
          type: string
          description: Surname of the customer.
        vatNumber:
          type: string
          description: Customer's VAT number.
    CustomerAccountPage:
      type: object
      description: A page of customer accounts
      properties:
        pageable:
          $ref: "#/components/schemas/Pageable"
        results:
          type: array
          items:
            $ref: "#/components/schemas/CustomerAccount"
        total:
          type: integer
          format: int32
      required:
        - pageable
        - results
        - total
    CustomerInput:
      type: object
      description: The customer's details.
      properties:
        email:
          type: string
          description: The customer's email address.
          example: null
          maxLength: 128
          minLength: 1
        givenName:
          type: string
          description: The customer's given name.
          example: John
          maxLength: 128
          minLength: 1
        phoneNumber:
          type: string
          description: The customer's phone number.
          example: null
          maxLength: 32
          minLength: 1
        surname:
          type: string
          description: The customer's surname.
          example: Doe
          maxLength: 128
          minLength: 1
    ExpressCheckoutDisplayIntent:
      type: string
      description: Indicates whether payment settings query is for express checkout
        product or cart.
      enum:
        - CART
        - PRODUCT
        - GENERIC
    GooglePayConnectionData:
      type: object
      allOf:
        - $ref: "#/components/schemas/ConnectionData"
        - type: object
          properties:
            displayName:
              type: string
            externalMerchantId:
              type: string
      description: Data for the google pay connection.
      required:
        - displayName
        - type
    GooglePayConnectionDataInput:
      type: object
      allOf:
        - $ref: "#/components/schemas/ConnectionDataInput"
        - type: object
          properties:
            externalMerchantId:
              type: string
      description: Data for the google pay connection.
      required:
        - externalMerchantId
        - type
    Invoice:
      type: object
      description: Invoice object
      properties:
        amountCredited:
          $ref: "#/components/schemas/Money"
        amountPaid:
          $ref: "#/components/schemas/Money"
        amountPending:
          $ref: "#/components/schemas/Money"
        amountRemaining:
          $ref: "#/components/schemas/Money"
        chaserPlanId:
          type: string
          description: Chaser plan id this invoice is assigned with.
        customerAccount:
          $ref: "#/components/schemas/InvoiceCustomerAccount"
        customerNotes:
          type: string
          description: Notes that is shown on the invoice to the customer.
        dueDate:
          type: string
          format: date-time
          description: The date and time when the invoice is due for.
        id:
          type: string
          description: The unique ID of the invoice.
        invoiceDate:
          type: string
          format: date-time
          description: The date and time for the invoice.
        invoiceNumber:
          type: string
          description: The number of the invoice.
        invoiceUrl:
          type: string
          description: Hosted invoice url to view and pay the invoice
        invoiceUrlExpiresAt:
          type: string
          format: date-time
          description: The datetime when the hosted invoice url expires.
        items:
          type: array
          items:
            $ref: "#/components/schemas/InvoiceItem"
        merchant:
          $ref: "#/components/schemas/InvoiceMerchant"
        merchantId:
          type: string
          description: The ID of the merchant that owns this invoice.
        metadata:
          type: object
          additionalProperties:
            type: string
            description: Key value pairs to store additional information about the
              invoice.
          description: Key value pairs to store additional information about the invoice.
        paidDate:
          type: string
          format: date-time
          description: The date and time when the invoice was paid on.
        status:
          $ref: "#/components/schemas/InvoiceStatus"
        subtotal:
          $ref: "#/components/schemas/Money"
        taxAmount:
          $ref: "#/components/schemas/Money"
        total:
          $ref: "#/components/schemas/Money"
      required:
        - amountCredited
        - amountPaid
        - amountPending
        - amountRemaining
        - customerAccount
        - id
        - invoiceDate
        - invoiceNumber
        - invoiceUrl
        - invoiceUrlExpiresAt
        - items
        - merchant
        - merchantId
        - metadata
        - status
        - subtotal
        - total
    InvoiceCreateInput:
      type: object
      description: The input to create a new invoice.
      properties:
        chaserPlanId:
          type: string
          description: The ID of the chaser plan to use.
        customerAccountId:
          type: string
          description: The ID of the customer account to invoice.
        customerNotes:
          type: string
          description: Customer notes to be added to the invoice. This will be shown
            to the customer on the invoice.
          maxLength: 255
          minLength: 0
        dueDate:
          type: string
          format: date-time
          description: The date invoice is due for.
        invoiceDate:
          type: string
          format: date-time
          description: The created date of the invoice.
        invoiceNumber:
          type: string
          description: The number of the invoice.
          example: "1234567"
          maxLength: 255
          minLength: 1
        items:
          type: array
          items:
            $ref: "#/components/schemas/InvoiceItemCreateInput"
        metadata:
          type: object
          additionalProperties:
            type: string
            default: "{}"
            description: Key value pairs to store additional information about the
              invoice.
            example: "{\"key1\":\"value1\",\"key2\":\"value2\"}"
          default: {}
          description: Key value pairs to store additional information about the invoice.
          example:
            key1: value1
            key2: value2
        taxAmount:
          $ref: "#/components/schemas/MoneyInput"
        total:
          $ref: "#/components/schemas/MoneyInput"
      required:
        - customerAccountId
        - invoiceDate
        - invoiceNumber
        - items
        - total
    InvoiceCustomerAccount:
      type: object
      description: Invoice customer account object
      properties:
        billingAddress:
          $ref: "#/components/schemas/InvoiceCustomerAccountAddress"
        email:
          type: string
          description: The email address of the customer.
        givenName:
          type: string
          description: The given name of the customer.
        id:
          type: string
          description: The ID of the customer account.
        organizationName:
          type: string
          description: The organization name of the customer account.
        phoneNumber:
          type: string
          description: The phone number of the customer.
        reference:
          type: string
          description: The reference for the customer account.
        shippingAddress:
          $ref: "#/components/schemas/InvoiceCustomerAccountAddress"
        surname:
          type: string
          description: The surname of the customer.
        vatNumber:
          type: string
          description: The VAT number of the customer account.
      required:
        - id
    InvoiceCustomerAccountAddress:
      type: object
      description: Invoice customer account address object
      properties:
        city:
          type: string
          description: The city of the address.
        company:
          type: string
          description: The company name of the customer.
        countryCode:
          type: string
          description: The country code of the address.
        line1:
          type: string
          description: The first line of the address.
        line2:
          type: string
          description: The second line of the address.
        name:
          type: string
          description: The name of the customer.
        phoneNumber:
          type: string
          description: The phone number of the customer.
        postcode:
          type: string
          description: The postcode of the address.
        state:
          type: string
          description: The state of the address.
      required:
        - city
        - countryCode
        - line1
        - name
        - postcode
    InvoiceDownload:
      type: object
      description: Invoice download object
      properties:
        expiresAt:
          type: string
          format: date-time
          description: The date and time when the url expires
        url:
          type: string
          description: The url to download the invoice
      required:
        - expiresAt
        - url
    InvoiceItem:
      type: object
      properties:
        id:
          type: string
          description: The unique ID for the item.
        name:
          type: string
          description: The name of the item.
        price:
          $ref: "#/components/schemas/Money"
        priceWithTax:
          $ref: "#/components/schemas/Money"
        quantity:
          type: string
          description: The quantity of the item.
        sku:
          type: string
          description: Stock keeping unit
        subtotal:
          $ref: "#/components/schemas/Money"
        supplyDate:
          $ref: "#/components/schemas/InvoiceItemSupplyDateDto"
        tax:
          $ref: "#/components/schemas/Money"
        taxRate:
          type: string
          description: The percent of tax applied.
        total:
          $ref: "#/components/schemas/Money"
      required:
        - id
        - name
        - price
        - quantity
        - sku
        - subtotal
        - total
    InvoiceItemCreateInput:
      type: object
      description: An item in the invoice
      properties:
        name:
          type: string
          description: The name of the item.
          maxLength: 255
          minLength: 1
        price:
          $ref: "#/components/schemas/MoneyInput"
        priceWithTax:
          $ref: "#/components/schemas/MoneyInput"
        quantity:
          type: string
          description: The quantity of the item being purchased.
        sku:
          type: string
          description: Stock keeping unit
          maxLength: 128
          minLength: 1
        supplyDate:
          $ref: "#/components/schemas/InvoiceItemSupplyDateInputDto"
        tax:
          $ref: "#/components/schemas/MoneyInput"
        taxRate:
          type: string
          description: The percent of tax applied.
        total:
          $ref: "#/components/schemas/MoneyInput"
      required:
        - name
        - price
        - quantity
        - sku
        - total
    InvoiceItemSupplyDateDto:
      type: object
      description: The date when the item was supplied.
      properties:
        end:
          type: string
          format: date-time
          description: The end date when the item was supplied.
        start:
          type: string
          format: date-time
          description: The start date when the item was supplied.
      required:
        - start
    InvoiceItemSupplyDateInputDto:
      type: object
      properties:
        end:
          type: string
          format: date-time
          description: The end date when the item was supplied.
        start:
          type: string
          format: date-time
          description: The start date when the item was supplied.
      required:
        - start
    InvoiceMerchant:
      type: object
      description: Invoice merchant object
      properties:
        address:
          $ref: "#/components/schemas/InvoiceMerchantAddress"
        companyNumber:
          type: string
          description: The company number for the merchant of the invoice.
        legalName:
          type: string
          description: The legal name for the merchant of the invoice.
        phoneNumber:
          type: string
          description: The phone number for the merchant of the invoice.
        vatNumber:
          type: string
          description: The vat number for the merchant of the invoice.
      required:
        - address
        - companyNumber
        - legalName
    InvoiceMerchantAddress:
      type: object
      description: Invoice merchant address object
      properties:
        cityOrTown:
          type: string
          description: The city or town of the address.
        countryCode:
          type: string
          description: The country code of the address.
        line1:
          type: string
          description: The first line of the address.
        line2:
          type: string
          description: The second line of the address.
        province:
          type: string
          description: The province of the address.
        zipOrPostcode:
          type: string
          description: The zip or postcode of the address.
      required:
        - cityOrTown
        - countryCode
        - line1
        - zipOrPostcode
    InvoiceNotification:
      type: object
      description: Invoice notification object
      properties:
        createdAt:
          type: string
          format: date-time
          description: The datetime when notification was created.
        email:
          type: string
          description: The email address used in the notification.
        givenName:
          type: string
          description: The given name used in the notification.
        id:
          type: string
          description: The unique identifier of the notification.
        phoneNumber:
          type: string
          description: The phone number used in the notification.
        sentBy:
          $ref: "#/components/schemas/InvoiceNotificationSentBy"
        status:
          type: string
          description: The status of the notification.
          enum:
            - PENDING
            - DELIVERED
            - FAILED
        surname:
          type: string
          description: The surname used in the notification.
        type:
          type: string
          description: The type of the notification.
          enum:
            - EMAIL
            - SMS
      required:
        - createdAt
        - id
        - status
        - type
    InvoiceNotificationInput:
      type: object
      description: The input to notify a customer of an invoice.
      properties:
        type:
          type: string
          enum:
            - EMAIL
            - SMS
      required:
        - type
    InvoiceNotificationPage:
      type: object
      description: A page of invoice notifications
      properties:
        pageable:
          $ref: "#/components/schemas/Pageable"
        results:
          type: array
          items:
            $ref: "#/components/schemas/InvoiceNotification"
        total:
          type: integer
          format: int32
      required:
        - pageable
        - results
        - total
    InvoiceNotificationSentBy:
      type: object
      description: Invoice notification sent by
      properties:
        givenName:
          type: string
          description: The given name of the sender.
        id:
          type: string
          description: The unique identifier of the sender.
        surname:
          type: string
          description: The surname of the sender.
      required:
        - id
    InvoicePage:
      type: object
      description: A page of invoices
      properties:
        pageable:
          $ref: "#/components/schemas/Pageable"
        results:
          type: array
          items:
            $ref: "#/components/schemas/Invoice"
        total:
          type: integer
          format: int32
      required:
        - pageable
        - results
        - total
    InvoiceStatus:
      type: string
      description: The status of the invoice.
      enum:
        - DRAFT
        - OPEN
        - PARTIALLY_PAID
        - PAID
        - OVERPAID
        - VOIDED
    InvoiceUpdateInputDto:
      type: object
      properties:
        customerNotes:
          type: string
          description: Customer notes to be added to the invoice. This will be shown
            to the customer on the invoice.
          maxLength: 255
          minLength: 0
        dueDate:
          type: string
          format: date-time
          description: The date invoice is due for.
        invoiceDate:
          type: string
          format: date-time
          description: The created date of the invoice.
        invoiceNumber:
          type: string
          maxLength: 255
          minLength: 1
        items:
          type: array
          items:
            $ref: "#/components/schemas/InvoiceItemCreateInput"
        metadata:
          type: object
          additionalProperties:
            type: string
            default: "{}"
            description: Key value pairs to store additional information about the
              invoice.
            example: "{\"key1\":\"value1\",\"key2\":\"value2\"}"
          default: {}
          description: Key value pairs to store additional information about the invoice.
          example:
            key1: value1
            key2: value2
        taxAmount:
          $ref: "#/components/schemas/MoneyInput"
        total:
          $ref: "#/components/schemas/MoneyInput"
      required:
        - invoiceDate
        - invoiceNumber
        - items
        - total
    Item:
      type: object
      description: List of items that the customer is purchasing.
      properties:
        createdAt:
          type: string
          format: date-time
          description: The datetime when the item was created.
        id:
          type: string
          description: The unique ID for the item.
        name:
          type: string
          description: The name of the item.
        price:
          $ref: "#/components/schemas/Money"
        priceWithTax:
          $ref: "#/components/schemas/Money"
        quantity:
          type: string
          description: The quantity of the item being purchased.
        restriction:
          $ref: "#/components/schemas/ItemRestriction"
        sku:
          type: string
          description: Stock keeping unit - the unique identifier for the item.
        tax:
          $ref: "#/components/schemas/Money"
        total:
          $ref: "#/components/schemas/Money"
      required:
        - createdAt
        - id
        - name
        - price
        - quantity
        - restriction
        - sku
        - total
    ItemInput:
      type: object
      description: An item that the customer is purchasing.
      example: null
      properties:
        name:
          type: string
          description: The name of the item.
          maxLength: 255
          minLength: 1
        price:
          $ref: "#/components/schemas/MoneyInput"
        priceWithTax:
          $ref: "#/components/schemas/MoneyInput"
        quantity:
          type: string
          description: The quantity of the item being purchased.
        restriction:
          $ref: "#/components/schemas/ItemRestriction"
        sku:
          type: string
          description: Stock keeping unit - the unique identifier for the item.
          maxLength: 128
          minLength: 1
        tax:
          $ref: "#/components/schemas/MoneyInput"
        total:
          $ref: "#/components/schemas/MoneyInput"
      required:
        - name
        - price
        - quantity
        - sku
        - total
    ItemRestriction:
      type: string
      description: Indicator of restrictions on the item. Some payment methods are
        unavailable for restricted items.
      enum:
        - ALLOWED
        - RESTRICTED
        - PROHIBITED
    KlarnaConnectionData:
      type: object
      allOf:
        - $ref: "#/components/schemas/ConnectionData"
        - type: object
          properties:
            apiPassword:
              type: string
            apiUsername:
              type: string
            displayName:
              type: string
            sdkClientIdentifier:
              type: string
      description: Data for the Klarna connection.
      required:
        - displayName
        - type
    KlarnaConnectionDataInput:
      type: object
      allOf:
        - $ref: "#/components/schemas/ConnectionDataInput"
        - type: object
          properties:
            apiPassword:
              type: string
            apiUsername:
              type: string
            sdkClientIdentifier:
              type: string
      description: Data for the klarna connection.
      required:
        - apiPassword
        - apiUsername
        - sdkClientIdentifier
        - type
    KlarnaPaymentMethodSettings:
      type: object
      description: Klarna payment method settings object
      properties:
        clientIdentifier:
          type: string
          description: Client identifier
    MagentoConnectionData:
      type: object
      allOf:
        - $ref: "#/components/schemas/ConnectionData"
        - type: object
          properties:
            accessToken:
              type: string
            accessTokenSecret:
              type: string
            baseUrl:
              type: string
            consumerKey:
              type: string
            consumerSecret:
              type: string
            displayName:
              type: string
            oauthSignatureMethod:
              $ref: "#/components/schemas/ConnectionOauthSignatureMethod"
      description: Data for the magento connection.
      required:
        - displayName
        - type
    MagentoConnectionDataInput:
      type: object
      allOf:
        - $ref: "#/components/schemas/ConnectionDataInput"
        - type: object
          properties:
            accessToken:
              type: string
            accessTokenSecret:
              type: string
            baseUrl:
              type: string
            consumerKey:
              type: string
            consumerSecret:
              type: string
            oauthSignatureMethod:
              $ref: "#/components/schemas/ConnectionOauthSignatureMethod"
      description: Data for the magento connection.
      required:
        - accessToken
        - accessTokenSecret
        - baseUrl
        - consumerKey
        - consumerSecret
        - type
    MagentoProxyConnectionData:
      type: object
      allOf:
        - $ref: "#/components/schemas/ConnectionData"
        - type: object
          properties:
            accessToken:
              type: string
            accessTokenSecret:
              type: string
            baseUrl:
              type: string
            consumerKey:
              type: string
            consumerSecret:
              type: string
            displayName:
              type: string
            oauthSignatureMethod:
              $ref: "#/components/schemas/ConnectionOauthSignatureMethod"
      description: Data for the magento proxy connection.
      required:
        - displayName
        - type
    MagentoProxyConnectionDataInput:
      type: object
      allOf:
        - $ref: "#/components/schemas/ConnectionDataInput"
        - type: object
          properties:
            accessToken:
              type: string
            accessTokenSecret:
              type: string
            baseUrl:
              type: string
            consumerKey:
              type: string
            consumerSecret:
              type: string
            oauthSignatureMethod:
              $ref: "#/components/schemas/ConnectionOauthSignatureMethod"
      description: Data for the magento proxy connection.
      required:
        - accessToken
        - accessTokenSecret
        - baseUrl
        - consumerKey
        - consumerSecret
        - type
    MerchantDomains:
      type: object
      description: Merchant domains object
      properties:
        domain:
          type: string
        id:
          type: string
      required:
        - domain
        - id
    MerchantDomainsCreateInput:
      type: object
      description: Merchant domains create input object
      properties:
        domainsToAdd:
          type: array
          items:
            type: string
          uniqueItems: true
      required:
        - domainsToAdd
    MerchantDomainsPage:
      type: object
      description: A page of merchant domains
      properties:
        pageable:
          $ref: "#/components/schemas/Pageable"
        results:
          type: array
          items:
            $ref: "#/components/schemas/MerchantDomains"
        total:
          type: integer
          format: int32
      required:
        - pageable
        - results
        - total
    MerchantLogoWithUrls:
      type: object
      description: Merchant logo with urls
      properties:
        documentId:
          type: string
          description: Logo document id
        size104x104:
          type: string
          description: Logo in 104x104 size
        size40x40:
          type: string
          description: Logo in 40x40 size
        size80x80:
          type: string
          description: Logo in 80x80 size
      required:
        - documentId
        - size104x104
        - size40x40
        - size80x80
    Money:
      type: object
      properties:
        amount:
          type: string
          description: The amount.
        currency:
          type: string
          description: |-
            The three-letter ISO-4217 currency code of the amount.
                                     For cryptocurrencies, the currency code is the cryptocurrency symbol in uppercase.
      required:
        - amount
        - currency
    MoneyInput:
      type: object
      example:
        amount: "100.00"
        currency: GBP
      properties:
        amount:
          type: string
          description: The amount as a string.
        currency:
          type: string
          description: The three-letter ISO-4217 currency code of the amount.
          enum:
            - AED
            - EUR
            - GBP
            - RON
            - USD
          pattern: AED|EUR|GBP|RON|USD
      required:
        - amount
        - currency
    NotificationSubscription:
      type: object
      description: Notification subscription.
      properties:
        activeFrom:
          type: string
          format: date-time
          description: Datetime from when the subscription is active.
        activeTo:
          type: string
          format: date-time
          description: Optional end datetime for the subscription.
        configurations:
          type: array
          description: List of notification configurations for the subscription.
          items:
            $ref: "#/components/schemas/NotificationSubscriptionConfiguration"
        createdAt:
          type: string
          format: date-time
          description: The datetime when the entity was created.
        id:
          type: string
          description: The id of the subscription.
        includeMainContact:
          type: boolean
          description: Whether main contact of the merchant is included in the recipients.
        isActive:
          type: boolean
          description: Whether the subscription is currently active.
        name:
          type: string
          description: The name of the subscription.
        recipients:
          type: array
          description: List of notification recipients for the subscription.
          items:
            $ref: "#/components/schemas/NotificationSubscriptionRecipient"
        updatedAt:
          type: string
          format: date-time
          description: The datetime when the entity was last updated.
      required:
        - activeFrom
        - configurations
        - createdAt
        - id
        - includeMainContact
        - isActive
        - name
        - recipients
        - updatedAt
    NotificationSubscriptionConfiguration:
      type: object
      description: Notification subscription configuration entry.The configuration
        defines the type of a notification and what channels it should be delivered
        on.
      properties:
        allowedChannels:
          type: array
          description: Allowed channels for this notification type.
          items:
            type: string
            description: Allowed channels for this notification type.
            enum:
              - EMAIL
              - SMS
        id:
          type: string
        notificationType:
          $ref: "#/components/schemas/NotificationType"
      required:
        - allowedChannels
        - id
        - notificationType
    NotificationSubscriptionConfigurationInput:
      type: object
      description: Notification subscription configuration input.The configuration
        defines the type of a notification and what channels it should be delivered
        on.
      properties:
        allowedChannels:
          type: array
          description: Allowed channels for this notification type.
          items:
            type: string
            description: Allowed channels for this notification type.
            enum:
              - EMAIL
              - SMS
          maxItems: 2147483647
          minItems: 1
          uniqueItems: true
        notificationType:
          $ref: "#/components/schemas/NotificationType"
      required:
        - allowedChannels
        - notificationType
    NotificationSubscriptionCreateInput:
      type: object
      description: Notification subscription create input.
      properties:
        activeFrom:
          type: string
          format: date-time
          description: Datetime from when the subscription is active. Defaults to
            current time
        activeTo:
          type: string
          format: date-time
          description: Optional end datetime for the subscription.
        configurations:
          type: array
          description: List of notification configurations for the subscription.
          items:
            $ref: "#/components/schemas/NotificationSubscriptionConfigurationInput"
          maxItems: 25
          minItems: 0
        includeMainContact:
          type: boolean
          description: Whether main contact of the merchant is included in the recipients.
        name:
          type: string
          description: The name of the subscription.
        recipients:
          type: array
          description: List of notification recipients for the subscription.
          items:
            $ref: "#/components/schemas/NotificationSubscriptionRecipientInput"
          maxItems: 25
          minItems: 0
      required:
        - configurations
        - includeMainContact
        - name
        - recipients
    NotificationSubscriptionPage:
      type: object
      description: A page of notification subscriptions
      properties:
        pageable:
          $ref: "#/components/schemas/Pageable"
        results:
          type: array
          items:
            $ref: "#/components/schemas/NotificationSubscription"
        total:
          type: integer
          format: int32
      required:
        - pageable
        - results
        - total
    NotificationSubscriptionRecipient:
      type: object
      description: Notification subscription recipient.
      properties:
        email:
          type: string
          description: Recipient email address.
        phoneNumber:
          type: string
          description: Recipient phone number.
    NotificationSubscriptionRecipientInput:
      type: object
      description: Notification subscription recipient input.
      properties:
        email:
          type: string
          description: Recipient email address.
        phoneNumber:
          type: string
          description: Recipient phone number.
    NotificationType:
      type: string
      description: The notification type.
      enum:
        - MERCHANT_PENDING_REFUNDS
        - MERCHANT_FAILED_REFUNDS
        - MERCHANT_FAILED_SEND_PAYMENT_LINK_NOTIFICATION
        - MERCHANT_PAYMENT_COMPLETED
        - MERCHANT_PAYMENT_DECLINED
        - MERCHANT_REFUND_SUCCEEDED
        - MERCHANT_PAYMENT_VOIDED
        - MERCHANT_WEEKEND_DISBURSEMENT_REPORT
        - MERCHANT_PAY_IN_RECEIVED
    Order:
      type: object
      description: Order object
      properties:
        amount:
          $ref: "#/components/schemas/Money"
        billingAddress:
          $ref: "#/components/schemas/Address"
        createdAt:
          type: string
          format: date-time
          description: The datetime when the order was created.
        customer:
          $ref: "#/components/schemas/Customer"
        customerAccountId:
          type: string
          description: The ID of the customer account that owns this order.
        items:
          type: array
          items:
            $ref: "#/components/schemas/Item"
        lastPaymentId:
          type: string
          description: The ID of the last payment made on this order.
        lastPaymentMethod:
          $ref: "#/components/schemas/PaymentMethod"
        lastPaymentStatus:
          $ref: "#/components/schemas/PaymentStatus"
        merchantId:
          type: string
          description: The ID of the merchant that owns this order.
        paymentSessionId:
          type: string
          description: The ID of the payment session that the order was created in.
        reference:
          type: string
          description: The unique reference of the order.
        shippingAddress:
          $ref: "#/components/schemas/Address"
      required:
        - amount
        - createdAt
        - items
        - merchantId
        - paymentSessionId
        - reference
    OrdersPage:
      type: object
      description: A page of orders
      properties:
        pageable:
          $ref: "#/components/schemas/Pageable"
        results:
          type: array
          items:
            $ref: "#/components/schemas/Order"
        total:
          type: integer
          format: int32
      required:
        - pageable
        - results
        - total
    Pageable:
      type: object
      properties:
        limit:
          type: integer
          format: int32
        offset:
          type: integer
          format: int64
      required:
        - limit
        - offset
    Payment:
      type: object
      description: List of payments that have been made for the payment session.
      properties:
        amount:
          $ref: "#/components/schemas/Money"
        authorizationExpiresAt:
          type: string
          format: date-time
          description: The datetime when the payment's authorization expires.
        captureType:
          $ref: "#/components/schemas/PaymentCaptureType"
        createdAt:
          type: string
          format: date-time
          description: The datetime when the payment was created.
        declineReason:
          $ref: "#/components/schemas/PaymentDeclineReason"
        id:
          type: string
          description: The unique ID for the payment.
        method:
          $ref: "#/components/schemas/PaymentMethod"
        paymentSessionId:
          type: string
          description: The ID of the payment session that the payment was created
            in.
        settlementStatus:
          $ref: "#/components/schemas/PaymentSettlementStatus"
        status:
          $ref: "#/components/schemas/PaymentStatus"
        summary:
          $ref: "#/components/schemas/PaymentSummary"
        updatedAt:
          type: string
          format: date-time
          description: The datetime when the payment was last updated.
        voidReason:
          $ref: "#/components/schemas/PaymentVoidReason"
      required:
        - amount
        - captureType
        - createdAt
        - id
        - method
        - paymentSessionId
        - settlementStatus
        - status
        - summary
        - updatedAt
    PaymentAction:
      type: object
      description: The list of actions that can be performed on the payment.
      properties:
        method:
          $ref: "#/components/schemas/PaymentActionMethod"
        type:
          $ref: "#/components/schemas/PaymentActionType"
        value:
          type: string
      required:
        - method
        - type
        - value
    PaymentActionMethod:
      type: string
      description: The method of the payment action.
      enum:
        - REDIRECT_URL
        - TOKEN
        - URL
    PaymentActionType:
      type: string
      description: The type of the payment action.
      enum:
        - AUTHORIZATION
        - CAPTURE
        - CANCEL
        - CONFIRM_AUTHORIZATION
        - CARD_3DS_AUTHENTICATION
    PaymentCaptureType:
      type: string
      description: The capture type for the payment.
      enum:
        - AUTOMATIC_CHECKOUT
        - AUTOMATIC_PLUGIN
        - MANUAL
    PaymentDeclineReason:
      type: string
      description: The reason the payment was declined.
      enum:
        - INSUFFICIENT_FUNDS
        - FUNDING_INSTRUMENT_DECLINED
        - CONSENT_MISSING
        - SUSPECTED_FRAUD
        - AMOUNT_LIMITS_EXCEEDED
        - ACCOUNT_CLOSED
        - CVV2_FAILURE
        - FUNDING_INSTRUMENT_EXPIRED
        - FUNDING_INSTRUMENT_INVALID
        - INVALID_AUTHORIZATION
    PaymentLink:
      type: object
      description: Payment link object
      properties:
        amount:
          $ref: "#/components/schemas/Money"
        checkoutIds:
          type: array
          description: The IDs of the checkouts that were created for this payment
            link.
          items:
            type: string
            description: The IDs of the checkouts that were created for this payment
              link.
        checkoutTemplateId:
          type: string
          description: |-
            The ID of the checkout template to use for this payment link.
                                     If not provided, the default template will be used.
        createdAt:
          type: string
          format: date-time
          description: The datetime when the payment link was created.
        id:
          type: string
          description: The unique ID of the payment link.
        merchantId:
          type: string
          description: The ID of the merchant that owns this checkout.
        reference:
          type: string
          description: |-
            Your reference to identify the payment link and subsequently created checkouts
                                     and payment sessions.
        reusable:
          type: boolean
          description: Whether the payment link can be reused for multiple payments.
        source:
          $ref: "#/components/schemas/ApplicationSource"
        status:
          $ref: "#/components/schemas/PaymentLinkStatus"
        updatedAt:
          type: string
          format: date-time
          description: The datetime when the payment link was last updated.
        url:
          type: string
          description: The URL to the hosted payment link page.
      required:
        - checkoutIds
        - createdAt
        - id
        - merchantId
        - reusable
        - source
        - status
        - updatedAt
        - url
    PaymentLinkCreateInput:
      type: object
      description: The input for creating a payment link.
      properties:
        amount:
          $ref: "#/components/schemas/MoneyInput"
        checkoutTemplateId:
          type: string
          description: |-
            The ID of the checkout template to use for this payment link.
                                     If not provided, the default template will be used.
                                     If provided, the template must be available to the merchant.
          example: null
        reference:
          type: string
          description: |-
            Your reference to identify the payment link and subsequently created checkouts
                                     and payment sessions.
          example: INVOICE-12345
          maxLength: 255
          minLength: 1
        reusable:
          type: boolean
          default: false
          description: Whether the payment link can be reused for multiple payments.
          example: false
        source:
          $ref: "#/components/schemas/ApplicationSource"
    PaymentLinkPage:
      type: object
      description: A page of payment links
      properties:
        pageable:
          $ref: "#/components/schemas/Pageable"
        results:
          type: array
          items:
            $ref: "#/components/schemas/PaymentLink"
        total:
          type: integer
          format: int32
      required:
        - pageable
        - results
        - total
    PaymentLinkStatus:
      type: string
      description: The status of the payment link.
      enum:
        - ACTIVE
        - EXPIRED
        - INACTIVE
        - COMPLETED
    PaymentMethod:
      type: string
      description: The payment method.
      enum:
        - FAKE_PAYMENT_METHOD
        - CLEARPAY
        - CRYPTO
        - PAYPAL
        - PAYPAL_CUSTOM_CARD
        - CARD
        - APPLE_PAY
        - GOOGLE_PAY
        - PAY_BY_BANK
        - KLARNA
        - ZOPA_RETAIL_FINANCE
    PaymentMethodAsset:
      type: object
      description: Payment method assets object
      properties:
        assetType:
          $ref: "#/components/schemas/PaymentMethodAssetType"
        attributes:
          type: object
          additionalProperties:
            type: string
        url:
          type: string
      required:
        - assetType
        - attributes
        - url
    PaymentMethodAssetType:
      type: string
      description: The type of the payment method asset.
      enum:
        - SCRIPT
    PaymentMethodDetail:
      type: object
      description: Payment method object
      properties:
        limits:
          $ref: "#/components/schemas/PaymentMethodLimit"
        logoUrl:
          type: string
        name:
          $ref: "#/components/schemas/PaymentMethod"
        settings:
          $ref: "#/components/schemas/PaymentMethodSettings"
        status:
          $ref: "#/components/schemas/PaymentMethodStatus"
        summaryUrl:
          type: string
      required:
        - logoUrl
        - name
        - settings
        - status
        - summaryUrl
    PaymentMethodDetailsPage:
      type: object
      description: A page of payment method details
      properties:
        pageable:
          $ref: "#/components/schemas/Pageable"
        results:
          type: array
          items:
            $ref: "#/components/schemas/PaymentMethodDetail"
        total:
          type: integer
          format: int32
      required:
        - pageable
        - results
        - total
    PaymentMethodLimit:
      type: object
      description: Payment method limits object. Contains expiration date and restrictions
        on the total for a currency.
      properties:
        expiresAt:
          type: string
          format: date-time
        total:
          type: array
          items:
            $ref: "#/components/schemas/PaymentMethodTotalLimit"
      required:
        - expiresAt
        - total
    PaymentMethodSettings:
      type: object
      description: Payment method settings object
      properties:
        assets:
          type: array
          items:
            $ref: "#/components/schemas/PaymentMethodAsset"
        card:
          $ref: "#/components/schemas/CardPaymentMethodSettings"
        description:
          type: string
        displayName:
          type: string
        klarna:
          $ref: "#/components/schemas/KlarnaPaymentMethodSettings"
        zopaRetailFinance:
          $ref: "#/components/schemas/ZopaRetailFinancePaymentMethodSettings"
      required:
        - assets
        - description
        - displayName
    PaymentMethodStatus:
      type: string
      description: The status of the payment method.
      enum:
        - ENABLED
        - DISABLED
        - UNAVAILABLE
        - SUSPENDED
    PaymentMethodTotalLimit:
      type: object
      description: Payment method total limit object. Contains min and max limits
        for a currency.
      properties:
        currency:
          type: string
        max:
          type: string
        min:
          type: string
      required:
        - currency
        - max
        - min
    PaymentSession:
      type: object
      properties:
        billingAddress:
          $ref: "#/components/schemas/Address"
        checkoutId:
          type: string
          description: The ID of the checkout that the payment session was created
            from.
        checkoutMode:
          $ref: "#/components/schemas/CheckoutMode"
        checkoutModeId:
          type: string
        createdAt:
          type: string
          format: date-time
          description: The datetime when the payment session was created.
        customer:
          $ref: "#/components/schemas/Customer"
        dashboardUrl:
          type: string
          description: The URL to the merchant dashboard for the payment session.
        discountTotal:
          $ref: "#/components/schemas/Money"
        externalReference:
          type: string
          description: Your reference to identify the payment session.
        id:
          type: string
          description: The unique ID for the payment session.
        items:
          type: array
          description: List of items that the customer is purchasing.
          items:
            $ref: "#/components/schemas/Item"
        merchantId:
          type: string
          description: The ID of the merchant that the payment session was created
            for.
        originUrl:
          type: string
          description: The URL that the customer was on when the payment session was
            created.
        paymentLinkId:
          type: string
          description: The ID of the payment link that the payment session was created
            from.
        payments:
          type: array
          description: List of payments that have been made for the payment session.
          items:
            $ref: "#/components/schemas/Payment"
        requiresShipping:
          type: boolean
          description: Whether the customer is required to provide a shipping address.
        shippingAddress:
          $ref: "#/components/schemas/Address"
        shippingTotal:
          $ref: "#/components/schemas/Money"
        status:
          $ref: "#/components/schemas/PaymentSessionStatus"
        taxTotal:
          $ref: "#/components/schemas/Money"
        total:
          $ref: "#/components/schemas/Money"
        updatedAt:
          type: string
          format: date-time
          description: The datetime when the payment session was last updated.
      required:
        - checkoutMode
        - createdAt
        - dashboardUrl
        - id
        - items
        - merchantId
        - payments
        - status
        - total
        - updatedAt
    PaymentSessionCreateInput:
      type: object
      description: Input for creating a payment session.
      properties:
        billingAddress:
          $ref: "#/components/schemas/AddressInput"
        customer:
          $ref: "#/components/schemas/CustomerInput"
        discountTotal:
          $ref: "#/components/schemas/MoneyInput"
        externalReference:
          type: string
          description: Your reference to identify the payment session.
          example: REF-12345
          maxLength: 255
          minLength: 1
        items:
          type: array
          description: List of items that the customer is purchasing.
          example: null
          items:
            $ref: "#/components/schemas/ItemInput"
        metadata:
          type: object
          additionalProperties:
            type: string
        originUrl:
          type: string
          description: The URL that the customer was on when the payment session was
            created.
        paymentCaptureType:
          $ref: "#/components/schemas/PaymentCaptureType"
        paymentMethod:
          $ref: "#/components/schemas/PaymentMethod"
        paymentType:
          $ref: "#/components/schemas/PaymentType"
        requiresShipping:
          type: boolean
          default: false
          description: Whether the customer is required to provide a shipping address.
        sessionKey:
          type: string
          description: |-
            The unique identifier for the payment session. If the same session key has been used,
                                     the existing payment session will be updated with the new values.
          example: DEFC8F15-3BBD-4153-9D6D-3A3D9F06C544
          maxLength: 64
          minLength: 1
        shippingAddress:
          $ref: "#/components/schemas/AddressInput"
        shippingTotal:
          $ref: "#/components/schemas/MoneyInput"
        taxTotal:
          $ref: "#/components/schemas/MoneyInput"
        total:
          $ref: "#/components/schemas/MoneyInput"
      required:
        - paymentMethod
        - sessionKey
        - total
    PaymentSessionStatus:
      type: string
      description: The status of the payment session.
      enum:
        - CANCELLED
        - DECLINED
        - EXPIRED
        - PENDING
        - REQUIRES_ACTION
        - REQUIRES_PAYMENT
        - SUCCEEDED
    PaymentSettings:
      type: object
      description: Payment Settings object
      properties:
        merchant:
          $ref: "#/components/schemas/PaymentSettingsMerchant"
        paymentMethods:
          $ref: "#/components/schemas/PaymentMethodDetailsPage"
      required:
        - merchant
        - paymentMethods
    PaymentSettingsContext:
      type: object
      description: Input for payment settings.
      properties:
        billingAddress:
          $ref: "#/components/schemas/Address"
        checkoutId:
          type: string
        expressCheckoutDisplayIntent:
          $ref: "#/components/schemas/ExpressCheckoutDisplayIntent"
        isForDigitalDownloads:
          type: boolean
        shippingAddress:
          $ref: "#/components/schemas/Address"
        total:
          $ref: "#/components/schemas/MoneyInput"
    PaymentSettingsMerchant:
      type: object
      description: Merchant details
      properties:
        id:
          type: string
          description: Merchant's id
        logo:
          $ref: "#/components/schemas/MerchantLogoWithUrls"
        name:
          type: string
          description: Merchant's name
      required:
        - id
        - name
    PaymentSettlementStatus:
      type: string
      description: The settlement status of the payment.
      enum:
        - NOT_INITIATED
        - ACCEPTED
        - SETTLED
        - FUNDS_RECEIVED
        - SETTLED_EXTERNALLY
    PaymentStatus:
      type: string
      description: The status of the payment.
      enum:
        - CREATED
        - PENDING
        - SUCCEEDED
        - REQUIRES_ACTION
        - FAILED
        - CANCELLED
        - DECLINED
        - EXPIRED
        - VOIDED
        - AUTHORIZED
        - AUTHORIZATION_EXPIRED
    PaymentSummary:
      type: object
      properties:
        isManuallyCapturable:
          type: boolean
          description: Whether the payment can be captured manually later.
        isRefundable:
          type: boolean
          description: Whether the payment is refundable.
        isVoidable:
          type: boolean
          description: Whether the payment is voidable.
        paymentActions:
          type: array
          description: The list of actions that can be performed on the payment.
          items:
            $ref: "#/components/schemas/PaymentAction"
        refundableAmount:
          $ref: "#/components/schemas/Money"
      required:
        - isManuallyCapturable
        - isRefundable
        - isVoidable
        - paymentActions
        - refundableAmount
    PaymentType:
      type: string
      default: CHECKOUT
      description: The type of payment.
      enum:
        - EXPRESS
        - STANDARD
        - CHECKOUT
    PaymentVoidReason:
      type: string
      description: The reason the payment was voided.
      enum:
        - CUSTOMER_REQUEST
        - MERCHANT_REQUEST
        - SUSPECTED_FRAUD
        - STOCK_ISSUES
        - INVALID_DATA
    Refund:
      type: object
      description: A refund.
      properties:
        amount:
          $ref: "#/components/schemas/Money"
        createdAt:
          type: string
          format: date-time
          description: The datetime when the refund was created.
        failureReason:
          $ref: "#/components/schemas/RefundFailureReason"
        id:
          type: string
          description: The unique ID for the refund.
        merchantId:
          type: string
          description: The merchant ID that the refund was created for.
        paymentId:
          type: string
          description: The payment ID that the refund was created for.
        paymentMethod:
          $ref: "#/components/schemas/PaymentMethod"
        paymentSessionId:
          type: string
          description: The payment session ID that the refund was created for.
        reason:
          type: string
          description: The reason for the refund.
          maxLength: 255
          minLength: 0
        status:
          $ref: "#/components/schemas/RefundStatus"
      required:
        - amount
        - createdAt
        - id
        - merchantId
        - paymentId
        - paymentMethod
        - paymentSessionId
        - status
    RefundCreateInput:
      type: object
      description: Input for creating a refund.
      properties:
        amount:
          $ref: "#/components/schemas/MoneyInput"
        reason:
          type: string
          description: The reason for the refund.
          maxLength: 255
          minLength: 0
      required:
        - amount
    RefundFailureReason:
      type: string
      description: The reason for the refund failure.
      enum:
        - AMOUNT_LIMITS_EXCEEDED
        - INSUFFICIENT_FUNDS
        - PAYMENT_DISPUTED
    RefundStatus:
      type: string
      description: The status of the refund.
      enum:
        - PENDING
        - SUCCEEDED
        - FAILED
    ShipmentTracking:
      type: object
      description: Shipment tracking object
      properties:
        id:
          type: string
        items:
          type: array
          items:
            $ref: "#/components/schemas/ShipmentTrackingItem"
        trackingDetail:
          type: array
          items:
            $ref: "#/components/schemas/ShipmentTrackingDetail"
      required:
        - id
        - items
        - trackingDetail
    ShipmentTrackingCreateInput:
      type: object
      description: Shipment tracking create input object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/ShipmentTrackingItemInput"
        trackingDetail:
          type: array
          items:
            $ref: "#/components/schemas/ShipmentTrackingDetailInput"
      required:
        - items
        - trackingDetail
    ShipmentTrackingDetail:
      type: object
      description: Shipment tracking detail
      properties:
        carrierCode:
          type: string
        title:
          type: string
        trackingNumber:
          type: string
      required:
        - carrierCode
        - title
        - trackingNumber
    ShipmentTrackingDetailInput:
      type: object
      description: Shipment tracking detail
      properties:
        carrierCode:
          type: string
        title:
          type: string
        trackingNumber:
          type: string
      required:
        - carrierCode
        - title
        - trackingNumber
    ShipmentTrackingItem:
      type: object
      description: Shipment tracking item
      properties:
        name:
          type: string
        quantity:
          type: string
        sku:
          type: string
      required:
        - name
        - quantity
        - sku
    ShipmentTrackingItemInput:
      type: object
      description: Shipment tracking item
      properties:
        name:
          type: string
        quantity:
          type: string
        sku:
          type: string
      required:
        - name
        - quantity
        - sku
    StartEnd:
      type: object
      description: Date range for the export.
      properties:
        end:
          type: string
          format: date-time
        start:
          type: string
          format: date-time
      required:
        - end
        - start
    StatementExportRequest:
      type: object
      description: Request statement export.
      properties:
        disbursementBatchId:
          type: string
        exportFormat:
          type: string
          description: Format for export.
          enum:
            - OFX_V2
        range:
          $ref: "#/components/schemas/StartEnd"
      required:
        - exportFormat
    Theme:
      type: object
      description: Theme object
      properties:
        backgroundImage:
          $ref: "#/components/schemas/ThemeBackgroundImage"
        colors:
          $ref: "#/components/schemas/ThemeColors"
        createdAt:
          type: string
          format: date-time
          description: The datetime when the theme was created.
        id:
          type: string
          description: The unique ID of the theme.
        isDefault:
          type: boolean
          description: Whether the theme is the default theme that is used when no
            theme is specified.
        merchantId:
          type: string
          description: The ID of the merchant that the theme belongs to.
        name:
          type: string
          description: The name of the theme.
        paymentMethodSelector:
          $ref: "#/components/schemas/ThemePaymentMethodSelector"
        updatedAt:
          type: string
          format: date-time
          description: The datetime when the theme was last updated.
      required:
        - colors
        - createdAt
        - id
        - isDefault
        - merchantId
        - name
        - paymentMethodSelector
        - updatedAt
    ThemeBackgroundImage:
      type: object
      description: The background images for the theme.
      properties:
        desktop:
          $ref: "#/components/schemas/ThemeDesktopBackgroundImage"
        mobile:
          $ref: "#/components/schemas/ThemeMobileBackgroundImage"
    ThemeBackgroundImageCreateInput:
      type: object
      description: The background images for the theme.
      example: null
      properties:
        desktop:
          $ref: "#/components/schemas/ThemeImageCreateInput"
        mobile:
          $ref: "#/components/schemas/ThemeImageCreateInput"
    ThemeBackgroundImageUpdateInput:
      type: object
      description: |-
        Theme background image update input.
                             Explicitly setting any of the fields to `null` will remove the image.
      example:
        desktop:
          documentId: DOC11111111111111111111111111
        mobile: null
      properties:
        desktop:
          $ref: "#/components/schemas/ThemeImageUpdateInput"
        mobile:
          $ref: "#/components/schemas/ThemeImageUpdateInput"
    ThemeColors:
      type: object
      description: Theme colors object
      properties:
        background:
          type: string
          description: Background color.
        primary:
          type: string
          description: Primary color.
        primaryDivider:
          type: string
          description: Primary divider color.
        primaryHover:
          type: string
          description: Primary hover color.
        primaryHoverLight:
          type: string
          description: Primary hover light color.
        primaryLight:
          type: string
          description: Primary light color.
      required:
        - primary
        - primaryDivider
        - primaryHover
        - primaryHoverLight
        - primaryLight
    ThemeColorsCreateInput:
      type: object
      description: Theme colors create input object
      properties:
        background:
          type: string
          description: Background color.
          example: rgb(238 238 238)
          maxLength: 128
          minLength: 1
        primary:
          type: string
          description: Primary color.
          example: "hsl(0, 0%, 9%)"
          maxLength: 128
          minLength: 1
        primaryDivider:
          type: string
          description: Primary divider color.
          example: rgb(212 212 212)
          maxLength: 128
          minLength: 1
        primaryHover:
          type: string
          description: Primary hover color.
          example: hsl(0 0% 0%)
          maxLength: 128
          minLength: 1
        primaryHoverLight:
          type: string
          description: Primary hover light color.
          example: "hsl(0, 0, 87%)"
          maxLength: 128
          minLength: 1
        primaryLight:
          type: string
          description: Primary light color.
          example: hsl(0 0% 94%)
          maxLength: 128
          minLength: 1
      required:
        - primary
        - primaryDivider
        - primaryHover
        - primaryHoverLight
        - primaryLight
    ThemeColorsUpdateInput:
      type: object
      description: Theme colors update input object
      properties:
        background:
          type: string
          description: Background color.
          example: null
          maxLength: 128
          minLength: 1
        primary:
          type: string
          description: Primary color.
          example: "hsl(0, 0%, 10%)"
          maxLength: 128
          minLength: 1
        primaryDivider:
          type: string
          description: Primary divider color.
          example: null
          maxLength: 128
          minLength: 1
        primaryHover:
          type: string
          description: Primary hover color.
          example: hsl(1 1% 1%)
          maxLength: 128
          minLength: 1
        primaryHoverLight:
          type: string
          description: Primary hover light color.
          example: null
          maxLength: 128
          minLength: 1
        primaryLight:
          type: string
          description: Primary light color.
          example: hsl(0 0% 95%)
          maxLength: 128
          minLength: 1
    ThemeCreateInput:
      type: object
      description: Theme create input object
      properties:
        backgroundImage:
          $ref: "#/components/schemas/ThemeBackgroundImageCreateInput"
        colors:
          $ref: "#/components/schemas/ThemeColorsCreateInput"
        isDefault:
          type: boolean
          description: Whether the theme is the default theme that is used when no
            theme is specified.
        name:
          type: string
          description: The name of the theme.
          example: My New Theme
          maxLength: 256
          minLength: 1
        paymentMethodSelector:
          $ref: "#/components/schemas/ThemePaymentMethodSelectorCreateInput"
      required:
        - colors
        - isDefault
        - name
        - paymentMethodSelector
    ThemeDesktopBackgroundImage:
      type: object
      description: The background image for desktop with the URLs for the different
        dimensions.
      properties:
        documentId:
          type: string
          description: The ID of the image document.
        size1920x1080:
          type: string
          description: The URL for the image with the size 1920x1080.
        size420x800:
          type: string
          description: The URL for the image with the size 420x800.
        size768x1024:
          type: string
          description: The URL for the image with the size 768x1024.
      required:
        - documentId
        - size1920x1080
        - size420x800
        - size768x1024
    ThemeImageCreateInput:
      type: object
      description: The image for the theme.
      properties:
        documentId:
          type: string
          description: The document ID of the image.
      required:
        - documentId
    ThemeImageUpdateInput:
      type: object
      description: Theme image update input.
      properties:
        documentId:
          type: string
          description: The document ID of the image.
      required:
        - documentId
    ThemeMobileBackgroundImage:
      type: object
      description: The background image for mobile with the URLs for the different
        dimensions.
      properties:
        documentId:
          type: string
          description: The ID of the image document.
        size1920x1080:
          type: string
          description: The URL for the image with the size 1920x1080.
        size420x800:
          type: string
          description: The URL for the image with the size 420x800.
        size768x1024:
          type: string
          description: The URL for the image with the size 768x1024.
      required:
        - documentId
        - size1920x1080
        - size420x800
        - size768x1024
    ThemePage:
      type: object
      description: A page of themes
      properties:
        pageable:
          $ref: "#/components/schemas/Pageable"
        results:
          type: array
          items:
            $ref: "#/components/schemas/Theme"
        total:
          type: integer
          format: int32
      required:
        - pageable
        - results
        - total
    ThemePaymentMethodSelector:
      type: object
      description: The theme settings for the payment method selector.
      properties:
        colors:
          $ref: "#/components/schemas/ThemePaymentMethodSelectorColors"
      required:
        - colors
    ThemePaymentMethodSelectorColors:
      type: object
      description: The colors for the payment method selector.
      properties:
        background:
          type: string
          description: The background color.
        border:
          type: string
          description: The border color.
        hoverBackground:
          type: string
          description: The hover background color.
        hoverText:
          type: string
          description: The hover text color.
        text:
          type: string
          description: The text color.
      required:
        - background
        - border
        - hoverBackground
        - hoverText
        - text
    ThemePaymentMethodSelectorColorsCreateInput:
      type: object
      description: The colors for the payment method selector.
      properties:
        background:
          type: string
          description: The border color.
          example: rgb(238 238 238)
          maxLength: 128
          minLength: 1
        border:
          type: string
          description: The background color.
          example: rgb(212 212 212)
          maxLength: 128
          minLength: 1
        hoverBackground:
          type: string
          description: The hover background color.
          example: hsl(0 0% 9%)
          maxLength: 128
          minLength: 1
        hoverText:
          type: string
          description: The hover text color.
          example: hsl(0 0% 100%)
          maxLength: 128
          minLength: 1
        text:
          type: string
          description: The text color.
          example: "#000"
          maxLength: 128
          minLength: 1
      required:
        - background
        - border
        - hoverBackground
        - hoverText
        - text
    ThemePaymentMethodSelectorColorsUpdateInput:
      type: object
      description: Theme payment method selector colors update input
      properties:
        background:
          type: string
          description: The border color.
          example: rgb(239 239 239)
          maxLength: 128
          minLength: 1
        border:
          type: string
          description: The background color.
          example: rgb(215 215 215)
          maxLength: 128
          minLength: 1
        hoverBackground:
          type: string
          description: The hover background color.
          example: hsl(0 0% 12%)
          maxLength: 128
          minLength: 1
        hoverText:
          type: string
          description: The hover text color.
          example: null
          maxLength: 128
          minLength: 1
        text:
          type: string
          description: The text color.
          example: null
          maxLength: 128
          minLength: 1
    ThemePaymentMethodSelectorCreateInput:
      type: object
      description: The theme settings for the payment method selector.
      properties:
        colors:
          $ref: "#/components/schemas/ThemePaymentMethodSelectorColorsCreateInput"
      required:
        - colors
    ThemePaymentMethodSelectorUpdateInput:
      type: object
      description: Theme payment method selector update input
      properties:
        colors:
          $ref: "#/components/schemas/ThemePaymentMethodSelectorColorsUpdateInput"
      required:
        - colors
    ThemeUpdateInput:
      type: object
      description: Theme update input
      properties:
        backgroundImage:
          $ref: "#/components/schemas/ThemeBackgroundImageUpdateInput"
        colors:
          $ref: "#/components/schemas/ThemeColorsUpdateInput"
        isDefault:
          type: boolean
          description: Whether the theme is the default theme that is used when no
            theme is specified.
          example: false
        name:
          type: string
          description: The name of the theme.
          example: My Updated Theme
          maxLength: 256
          minLength: 1
        paymentMethodSelector:
          $ref: "#/components/schemas/ThemePaymentMethodSelectorUpdateInput"
    Webhook:
      type: object
      properties:
        headers:
          type: object
          additionalProperties:
            type: string
            description: Custom headers for the webhook.
          description: Custom headers for the webhook.
        id:
          type: string
          description: The unique ID of the webhook.
        merchantId:
          type: string
          description: The ID of the merchant that the webhook belongs to.
        status:
          $ref: "#/components/schemas/WebhookStatus"
        subscribedEvents:
          type: array
          description: The events that the webhook is subscribed to.
          items:
            $ref: "#/components/schemas/WebhookEventType"
          uniqueItems: true
        url:
          type: string
          description: The URL to send the webhook events to.
      required:
        - headers
        - id
        - merchantId
        - status
        - subscribedEvents
        - url
    WebhookCreateInput:
      type: object
      description: The input for creating a webhook.
      properties:
        headers:
          type: object
          additionalProperties:
            type: string
            description: Custom headers for the webhook
            nullable: true
          description: Custom headers for the webhook
          nullable: true
        subscribedEvents:
          type: array
          description: The events to subscribe to.
          example:
            - PAYMENT_SUCCEEDED
            - REFUND_SUCCEEDED
          items:
            $ref: "#/components/schemas/WebhookEventType"
          maxItems: 2147483647
          minItems: 1
          uniqueItems: true
        url:
          type: string
          description: The URL to send the webhook event to.
          example: https://example.com/webhook
      required:
        - headers
        - subscribedEvents
        - url
    WebhookEventType:
      type: string
      description: The event type of the webhook.
      enum:
        - PAYMENT_AUTHORIZED
        - PAYMENT_COMPLETED
        - PAYMENT_SUCCEEDED
        - REFUND_COMPLETED
        - REFUND_SUCCEEDED
      example: "[\"PAYMENT_SUCCEEDED\"]"
    WebhookPage:
      type: object
      description: A page of webhooks
      properties:
        pageable:
          $ref: "#/components/schemas/Pageable"
        results:
          type: array
          items:
            $ref: "#/components/schemas/Webhook"
        total:
          type: integer
          format: int32
      required:
        - pageable
        - results
        - total
    WebhookStatus:
      type: string
      description: The status of the webhook.
      enum:
        - ENABLED
        - DISABLED
    WebhookUpdateInput:
      type: object
      description: The input for updating a webhook.
      properties:
        headers:
          type: object
          additionalProperties:
            type: string
            description: Custom headers for the webhook
            nullable: true
          description: Custom headers for the webhook
          nullable: true
        status:
          $ref: "#/components/schemas/WebhookStatus"
        subscribedEvents:
          type: array
          description: The events to subscribe to.
          example:
            - PAYMENT_SUCCEEDED
          items:
            $ref: "#/components/schemas/WebhookEventType"
          uniqueItems: true
        url:
          type: string
          description: The URL to send the webhook event to.
          example: https://example.com/new/webhook
    WoocommerceConnectionData:
      type: object
      allOf:
        - $ref: "#/components/schemas/ConnectionData"
        - type: object
          properties:
            baseUrl:
              type: string
            consumerKey:
              type: string
            consumerSecret:
              type: string
            displayName:
              type: string
      description: Data for the Woocommerce connection.
      required:
        - displayName
        - type
    WoocommerceConnectionDataInput:
      type: object
      allOf:
        - $ref: "#/components/schemas/ConnectionDataInput"
        - type: object
          properties:
            baseUrl:
              type: string
            consumerKey:
              type: string
            consumerSecret:
              type: string
      description: Data for the WooCommerce connection.
      required:
        - baseUrl
        - consumerKey
        - consumerSecret
        - type
    ZopaRetailFinanceConnectionData:
      type: object
      allOf:
        - $ref: "#/components/schemas/ConnectionData"
        - type: object
          properties:
            authenticationNumber:
              type: string
            oauthClientId:
              type: string
            oauthClientSecret:
              type: string
            retailerId:
              type: string
            sdkApiKey:
              type: string
            tokenNumber:
              type: string
      description: Data for the Zopa Retail Finance Connection.
      required:
        - type
    ZopaRetailFinanceConnectionDataInput:
      type: object
      allOf:
        - $ref: "#/components/schemas/ConnectionDataInput"
        - type: object
          properties:
            authenticationNumber:
              type: string
            oauthClientId:
              type: string
            oauthClientSecret:
              type: string
            sdkApiKey:
              type: string
            tokenNumber:
              type: string
      description: Data for the Zopa retail finance connection.
      required:
        - authenticationNumber
        - oauthClientId
        - oauthClientSecret
        - tokenNumber
        - type
    ZopaRetailFinancePaymentMethodSettings:
      type: object
      description: Zopa retail finance payment method settings object
      properties:
        sdkApiKey:
          type: string
          description: Zopa Retail Finance SDK API Key used for initialising the frontend
            SDK
  securitySchemes:
    apiKey:
      bearerFormat: JWT
      scheme: bearer
      type: http
